/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package com.barassolutions;

import com.barassolutions.core.*;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Parser generated by JavaCC. It parses a newOz program file, taking tokens from the scanner
 * (also generated by JavaCC), and produces an abstract syntax tree (AST) for it.
 */

class JavaCCParser implements JavaCCParserConstants {
    /** Whether a parser error has been found. */
    private boolean errorHasOccurred;

    /** Name of the file that is being parsed. */
    private String fileName;

    /**
     * Report a syntax error.
     *
     * @param message message identifying the error.
     * @param args related values.
     */
    private void reportParserError(String message, Object... args) {
        errorHasOccurred = true;
        System.err.printf("%s:%d: ", fileName, token.beginLine);
        System.err.printf(message, args);
        System.err.println();
    }

    /**
     * Recover from the parser error that occurred by skipping to
     * any of the specified tokens.
     *
     * Current error recovery mechanism is rather simple-minded and is
     * based on skipping all the tokens until a new line or an EOF is
     * encountered. This scheme can be enhanced by passing in the
     * FOLLOW-SET of the non-terminal at hand.
     *
     * @param skipTo array of tokens that we could skip to.
     * @param e exception that is raised by JavaCC in the event
     * of a parser error.
     */
    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[ i ].length; j++) {
                expected.append("\u005cn");
                expected.append("\u005ct");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\u005c"%s\u005c" found where %s sought", getToken( 1 ), expected);
        } else {
            reportParserError("\u005c"%s\u005c" found where one of %s sought", getToken(1), expected);
        }

        // Recover
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i : skipTo) {
                if (token.kind == i) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

    /**
     * Set the name of the file that is being parsed.
     *
     * @param fileName name of the file.
     */
    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Has a parser error occurred up to now?
     *
     * @return true or false.
     */
    public boolean errorHasOccurred() {
        return errorHasOccurred;
        }

  static final public InterStatement interStatement() throws ParseException {
    int line = 0;
    DeclarationPart aDeclarationPart = null;
    ArrayList<DeclarationPart> declarations = new ArrayList<DeclarationPart>();
    Statement aStatement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    InterStatement out = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        jj_consume_token(DECLARE);
        jj_consume_token(LCURLY);
                            line = token.beginLine;
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case DEF:
          case DEFPROC:
          case FUNCTOR:
          case VAL:
          case VAR:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          aDeclarationPart = declarationPart();
            declarations.add(aDeclarationPart);
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case DEF:
          case DEFPROC:
          case FALSE:
          case FOR:
          case FUNCTOR:
          case IF:
          case LOCK:
          case MATCH:
          case NIL:
          case RAISE:
          case RETURN:
          case SKP:
          case SUPER:
          case THIS:
          case THREAD:
          case TRUE:
          case TRY:
          case UNIT:
          case LNOT:
          case MINUS:
          case PLUS:
          case INC:
          case DEC:
          case UNDERSCORE:
          case DOLLAR:
          case LBRACK:
          case LCURLY:
          case LPAREN:
          case SEMI:
          case VARIABLE:
          case ATOM:
          case ATOMLISP:
          case STRING:
          case CHARACTER:
          case INT:
          case FLOAT:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          aStatement = statement();
            statements.add(aStatement);
        }
        jj_consume_token(RCURLY);
        jj_consume_token(0);
        out = new InterStatement(line, declarations, statements);
        break;
      case CLASS:
      case DEF:
      case DEFPROC:
      case FALSE:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case NIL:
      case RAISE:
      case SUPER:
      case THIS:
      case THREAD:
      case TRUE:
      case TRY:
      case UNIT:
      case LNOT:
      case MINUS:
      case PLUS:
      case INC:
      case DEC:
      case UNDERSCORE:
      case DOLLAR:
      case LBRACK:
      case LCURLY:
      case LPAREN:
      case VARIABLE:
      case ATOM:
      case ATOMLISP:
      case STRING:
      case CHARACTER:
      case INT:
      case FLOAT:
        label_3:
        while (true) {
          aStatement = nestConStatement();
        statements.add(aStatement);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case DEF:
          case DEFPROC:
          case FALSE:
          case FOR:
          case FUNCTOR:
          case IF:
          case LOCK:
          case MATCH:
          case NIL:
          case RAISE:
          case SUPER:
          case THIS:
          case THREAD:
          case TRUE:
          case TRY:
          case UNIT:
          case LNOT:
          case MINUS:
          case PLUS:
          case INC:
          case DEC:
          case UNDERSCORE:
          case DOLLAR:
          case LBRACK:
          case LCURLY:
          case LPAREN:
          case VARIABLE:
          case ATOM:
          case ATOMLISP:
          case STRING:
          case CHARACTER:
          case INT:
          case FLOAT:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
        }
        out = new InterStatement(line, statements);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{EOF}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Statement statement() throws ParseException {
    int line = 0;
    Statement statement = null;
    Expression expression = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case DEF:
      case DEFPROC:
      case FALSE:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case NIL:
      case RAISE:
      case SUPER:
      case THIS:
      case THREAD:
      case TRUE:
      case TRY:
      case UNIT:
      case LNOT:
      case MINUS:
      case PLUS:
      case INC:
      case DEC:
      case UNDERSCORE:
      case DOLLAR:
      case LBRACK:
      case LCURLY:
      case LPAREN:
      case VARIABLE:
      case ATOM:
      case ATOMLISP:
      case STRING:
      case CHARACTER:
      case INT:
      case FLOAT:
        statement = nestConStatement();
                                         line = token.beginLine;
        break;
      case SKP:
        jj_consume_token(SKP);
            line = token.beginLine;
          statement = new SkipStatement(line);
        break;
      case SEMI:
        jj_consume_token(SEMI);
        break;
      case RETURN:
        jj_consume_token(RETURN);
                     line = token.beginLine;
        expression = expression();
            statement = new ReturnStatement(line, expression);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{EOF}, e);
    }
      {if (true) return new Statement(line, statement);}
    throw new Error("Missing return statement in function");
  }

  static final private Expression expression() throws ParseException {
    int line = 0;
    Expression expression = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case IF:
      case LOCK:
      case MATCH:
      case RAISE:
      case THREAD:
      case TRY:
      case LPAREN:
      case VARIABLE:
        expression = nestConExpression();
                                             line = expression.line();
        break;
      case CLASS:
      case DEF:
      case DEFPROC:
      case FUNCTOR:
        expression = nestDecAnonym();
                                         line = expression.line();
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
            line = token.beginLine;
            expression = new AnonymExpression(line);
        break;
      case ATOM:
      case ATOMLISP:
        expression = term();
        break;
      case THIS:
        jj_consume_token(THIS);
            line = token.beginLine;
            expression = new ThisExpression(line);
        break;
      default:
        jj_la1[5] = jj_gen;
        if (jj_2_1(2147483647)) {
          expression = inExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{EOF}, e);
    }
      {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression parExpression() throws ParseException {
    Expression expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private InStatement inStatement() throws ParseException {
    int line = 0;
    DeclarationPart aDecl = null;
    ArrayList<DeclarationPart> decls = new ArrayList<DeclarationPart>();
    Statement aStatement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    Expression expression = null;
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FUNCTOR:
        case VAL:
        case VAR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        aDecl = declarationPart();
                                      decls.add(aDecl);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FALSE:
        case FOR:
        case FUNCTOR:
        case IF:
        case LOCK:
        case MATCH:
        case NIL:
        case RAISE:
        case RETURN:
        case SKP:
        case SUPER:
        case THIS:
        case THREAD:
        case TRUE:
        case TRY:
        case UNIT:
        case LNOT:
        case MINUS:
        case PLUS:
        case INC:
        case DEC:
        case UNDERSCORE:
        case DOLLAR:
        case LBRACK:
        case LCURLY:
        case LPAREN:
        case SEMI:
        case VARIABLE:
        case ATOM:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        aStatement = statement();
                                       statements.add(aStatement);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new InStatement(line, decls, statements);}
    throw new Error("Missing return statement in function");
  }

  static final private InExpression inExpression() throws ParseException {
    int line = 0;
    DeclarationPart aDecl = null;
    ArrayList<DeclarationPart> decls = new ArrayList<DeclarationPart>();
    Statement statement = null;
    Expression expression = null;
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FUNCTOR:
        case VAL:
        case VAR:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        aDecl = declarationPart();
                                      decls.add(aDecl);
      }
      statement = statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case DEF:
      case DEFPROC:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case RAISE:
      case THIS:
      case THREAD:
      case TRY:
      case DOLLAR:
      case LCURLY:
      case LPAREN:
      case VARIABLE:
      case ATOM:
      case ATOMLISP:
        expression = expression();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new InExpression(line, decls, statement, expression);}
    throw new Error("Missing return statement in function");
  }

  static final private Statement nestConStatement() throws ParseException {
    int line = 0;
    Statement out = null;
    String name = null;
    InStatement statement = null;
    InStatement statement2 = null;
    Expression expression = null;
    Expression expression2 = null;
    ArrayList<Expression> args = new ArrayList<Expression>(); //TODO move to a map instead
    ArrayList<Expression> conds = new ArrayList<Expression>();
    ArrayList<InStatement> consq = new ArrayList<InStatement>();
    boolean firstClausePassed = false;
    CaseStatementClause aClause = null;
    ArrayList<CaseStatementClause> clauses = new ArrayList<CaseStatementClause>();
    LoopDeclaration loopDec = null;
    ArrayList<LoopDeclaration> loopDecs = new ArrayList<LoopDeclaration>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case DEF:
      case DEFPROC:
      case FALSE:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case NIL:
      case RAISE:
      case SUPER:
      case THIS:
      case THREAD:
      case TRUE:
      case TRY:
      case UNIT:
      case LNOT:
      case MINUS:
      case PLUS:
      case INC:
      case DEC:
      case UNDERSCORE:
      case DOLLAR:
      case LBRACK:
      case LCURLY:
      case LPAREN:
      case VARIABLE:
      case ATOM:
      case ATOMLISP:
      case STRING:
      case CHARACTER:
      case INT:
      case FLOAT:
        expression = assignmentExpression();
                                              line = expression.line();
         out = expression;
        break;
        jj_consume_token(VARIABLE);
                        line = token.beginLine; name = token.image;
        jj_consume_token(LPAREN);
        expression2 = expression();
                                                args.add(expression2);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          expression2 = expression();
                                                 args.add(expression2);
        }
        jj_consume_token(RPAREN);
            out = new CallProcedure(line, name, args);
        break;
        jj_consume_token(LPAREN);
                     line = token.beginLine;
        statement = inStatement();
        jj_consume_token(RPAREN);
            out = statement;
        break;
        jj_consume_token(IF);
                 line = token.beginLine;
        expression = parExpression();
        statement = inStatement();
            conds.add(expression); consq.add((InStatement) statement);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_8;
          }
          jj_consume_token(ELSE);
          jj_consume_token(IF);
          expression = parExpression();
          statement = inStatement();
              conds.add(expression); consq.add((InStatement) statement);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          statement = inStatement();
              consq.add((InStatement) statement);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
            out = new ConditionalStruct(line, conds, consq);
        break;
        jj_consume_token(MATCH);
                    line = token.beginLine;
        expression = expression();
        jj_consume_token(LCURLY);
        label_9:
        while (true) {
          jj_consume_token(CASE);
          aClause = caseStatementClause(firstClausePassed);
                                                                      firstClausePassed = true; clauses.add(aClause);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASE:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_9;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          statement = inStatement();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
            out = new CaseStructure(line, expression, clauses, statement);
        jj_consume_token(RCURLY);
        break;
        jj_consume_token(FOR);
                  line = token.beginLine;
        jj_consume_token(LPAREN);
        label_10:
        while (true) {
          loopDec = loopDeclaration();
              loopDecs.add(loopDec);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARIABLE:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_10;
          }
        }
        jj_consume_token(RPAREN);
        statement = inStatement();
            out = new LoopStructure(line, loopDecs, (InStatement) statement);
        break;
        jj_consume_token(TRY);
                  line = token.beginLine;
        statement = inStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          jj_consume_token(CATCH);
          jj_consume_token(LCURLY);
          label_11:
          while (true) {
            jj_consume_token(CASE);
            aClause = caseStatementClause(firstClausePassed);
                                                                        firstClausePassed = true; clauses.add(aClause);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CASE:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_11;
            }
          }
          jj_consume_token(RCURLY);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          jj_consume_token(FINALLY);
          statement2 = inStatement();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
            out = new TryStructure(line, (InStatement) statement, clauses, statement2);
        break;
        jj_consume_token(RAISE);
                    line = token.beginLine;
        expression = inExpression();
            out = new RaiseStructure(line, (InExpression) expression);
        break;
        jj_consume_token(THREAD);
                     line = token.beginLine;
        statement = inStatement();
            out = new ThreadStructure(line, statement);
        break;
        jj_consume_token(LOCK);
                   line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          expression = expression();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        statement = inStatement();
            out = new LockStructure(line, expression, statement);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression nestConExpression() throws ParseException {
    int line = 0;
    Expression out = null;
    String name = null;
    Statement statement = null;
    Expression expression = null;
    Expression expression2 = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
    ArrayList<Expression> conds = new ArrayList<Expression>();
    ArrayList<InStatement> consq = new ArrayList<InStatement>();
    boolean firstClausePassed = false;
    CaseStatementClause aClause = null;
    ArrayList<CaseStatementClause> clauses = new ArrayList<CaseStatementClause>();
    LoopDeclaration loopDec = null;
    ArrayList<LoopDeclaration> loopDecs = new ArrayList<LoopDeclaration>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
                     line = token.beginLine; name = token.image;
        jj_consume_token(LPAREN);
        expression = expression();
                                               args.add(expression);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          expression = expression();
                                                args.add(expression);
        }
        jj_consume_token(RPAREN);
            out = new CallFunction(line, name, args);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
                     line = token.beginLine;
        expression = expression();
        jj_consume_token(RPAREN);
            out = expression;
        break;
      case IF:
        jj_consume_token(IF);
                 line = token.beginLine;
        jj_consume_token(LPAREN);
        expression = expression();
        jj_consume_token(RPAREN);
        expression2 = inExpression();
            conds.add(expression); consq.add(expression2);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_13;
          }
          jj_consume_token(ELSE);
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          expression = expression();
          jj_consume_token(RPAREN);
          expression2 = inExpression();
              conds.add(expression); consq.add(expression2);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          expression = inExpression();
              consq.add(expression);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
            out = new ConditionalStruct(line, conds, consq);
        break;
      case MATCH:
        jj_consume_token(MATCH);
                    line = token.beginLine;
        expression = expression();
        jj_consume_token(LCURLY);
        label_14:
        while (true) {
          jj_consume_token(CASE);
          aClause = caseExpressionClause(firstClausePassed);
                                                                       firstClausePassed = true; clauses.add(aClause);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASE:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_14;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          expression2 = inExpression();
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
            out = new CaseStructure(line, expression, clauses, expression2);
        jj_consume_token(RCURLY);
        break;
      case FOR:
        jj_consume_token(FOR);
                  line = token.beginLine;
        jj_consume_token(LPAREN);
        label_15:
        while (true) {
          loopDec = loopDeclaration();
              loopDecs.add(loopDec);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARIABLE:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_15;
          }
        }
        jj_consume_token(RPAREN);
        expression = inExpression();
            out = new LoopStructure(line, loopDecs, (InExpression) expression);
        break;
      case TRY:
        jj_consume_token(TRY);
                  line = token.beginLine;
        expression = inExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          jj_consume_token(CATCH);
          jj_consume_token(LCURLY);
          label_16:
          while (true) {
            jj_consume_token(CASE);
            aClause = caseExpressionClause(firstClausePassed);
                                                                         firstClausePassed = true; clauses.add(aClause);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CASE:
              ;
              break;
            default:
              jj_la1[27] = jj_gen;
              break label_16;
            }
          }
          jj_consume_token(RCURLY);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          jj_consume_token(FINALLY);
          statement = inStatement();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
            out = new TryStructure(line, expression, clauses, statement);
        break;
      case RAISE:
        jj_consume_token(RAISE);
                    line = token.beginLine;
        expression = inExpression();
            out = new RaiseStructure(line, (InExpression) expression);
        break;
      case THREAD:
        jj_consume_token(THREAD);
                     line = token.beginLine;
        expression = inExpression();
            out = new ThreadStructure(line, (InExpression) expression);
        break;
      case LOCK:
        jj_consume_token(LOCK);
                   line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          expression = expression();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        expression2 = inExpression();
            out = new LockStructure(line, expression, expression2);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private DeclarationPart nestDecVariable() throws ParseException {
    int line = 0;
    int line2 = 0;
    DeclarationPart out = null;
    InStatement statement = null;
    Expression expression = null;
    String name = null;
    boolean lazy = false;
    Pattern aPattern = null;
    ArrayList<Pattern> args = new ArrayList<Pattern>();
    ImportClause importClause = null;
    ArrayList<ImportClause> imports = new ArrayList<ImportClause>();
    ExportClause exportClause = null;
    ArrayList<ExportClause> exports = new ArrayList<ExportClause>();
    ClassDescriptor aDescriptor = null;
    ArrayList<ClassDescriptor> descriptors = new ArrayList<ClassDescriptor>();
    ClassElement classElement = null;
    ArrayList<Method> methods = new ArrayList<Method>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFPROC:
        jj_consume_token(DEFPROC);
                    line = token.beginLine;
        jj_consume_token(VARIABLE);
                       name = token.image;
        jj_consume_token(LPAREN);
        aPattern = pattern();
                                 args.add(aPattern);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          aPattern = pattern();
                                           args.add(aPattern);
        }
        jj_consume_token(RPAREN);
        statement = inStatement();
            out = new ProcedureDef(line, name, args, statement);
        break;
      case DEF:
        jj_consume_token(DEF);
                  line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAZY:
          jj_consume_token(LAZY);
                    lazy = true;
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(VARIABLE);
                       name = token.image;
        jj_consume_token(LPAREN);
        aPattern = pattern();
                                 args.add(aPattern);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_18;
          }
          jj_consume_token(COMMA);
          aPattern = pattern();
                                           args.add(aPattern);
        }
        jj_consume_token(RPAREN);
        expression = inExpression();
            out = new FunctionDef(line, name, args, expression, lazy);
        break;
      case FUNCTOR:
        jj_consume_token(FUNCTOR);
                      line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          jj_consume_token(VARIABLE);
                         name = token.image;
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case IMPORT:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_19;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT:
            jj_consume_token(IMPORT);
            importClause = importClause();
                                                       imports.add(importClause);
            label_20:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[37] = jj_gen;
                break label_20;
              }
              jj_consume_token(COMMA);
              importClause = importClause();
                                                        imports.add(importClause);
            }
            break;
          case EXPORT:
            jj_consume_token(EXPORT);
            exportClause = exportClause();
                                                       exports.add(exportClause);
            label_21:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[38] = jj_gen;
                break label_21;
              }
              jj_consume_token(COMMA);
              exportClause = exportClause();
                                                        exports.add(exportClause);
            }
            break;
          default:
            jj_la1[39] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        statement = inStatement();
            out = new Functor(line, name, imports, exports, statement);
        break;
      case CLASS:
        jj_consume_token(CLASS);
                    line = token.beginLine;
        jj_consume_token(VARIABLESTRICT);
                             name = token.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
        case EXTENDS:
        case PROP:
          aDescriptor = classDescriptor();
                                              descriptors.add(aDescriptor);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(LCURLY);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
          case DEF:
          case EXTENDS:
          case PROP:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_22;
          }
          classElement = classElementDef();
              if(classElement instanceof Method){
                methods.add(classElement);
              } else {
                descriptors.add(classElement);
              }
        }
        jj_consume_token(RCURLY);
            out = new ClassDeclaration(line, name, descriptors, methods);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Statement nestDecAnonym() throws ParseException {
    int line = 0;
    int line2 = 0;
    InStatement out = null;
    Statement statement = null;
    Expression expression = null;
    Variable name = null;
    boolean lazy = false;
    Pattern aPattern = null;
    ArrayList<Pattern> args = new ArrayList<Pattern>();
    ImportClause importClause = null;
    ArrayList<ImportClause> imports = new ArrayList<ImportClause>();
    ExportClause exportClause = null;
    ArrayList<ExportClause> exports = new ArrayList<ExportClause>();
    ClassDescriptor aDescriptor = null;
    ArrayList<ClassDescriptor> descriptors = new ArrayList<ClassDescriptor>();
    ClassElement classElement = null;
    ArrayList<Method> methods = new ArrayList<Method>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFPROC:
        jj_consume_token(DEFPROC);
                    line = token.beginLine;
        jj_consume_token(DOLLAR);
        jj_consume_token(LPAREN);
        aPattern = pattern();
                                 args.add(aPattern);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_23;
          }
          jj_consume_token(COMMA);
          aPattern = pattern();
                                           args.add(aPattern);
        }
        jj_consume_token(RPAREN);
        statement = inStatement();
            out = new ProcedureDef(line, null, args, statement);
        break;
      case DEF:
        jj_consume_token(DEF);
                  line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAZY:
          jj_consume_token(LAZY);
                    lazy = true;
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        jj_consume_token(DOLLAR);
        jj_consume_token(LPAREN);
        aPattern = pattern();
                                 args.add(aPattern);
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_24;
          }
          jj_consume_token(COMMA);
          aPattern = pattern();
                                           args.add(aPattern);
        }
        jj_consume_token(RPAREN);
        expression = inExpression();
            out = new FunctionDef(
          line, null, args, expression, lazy);
        break;
      case FUNCTOR:
        jj_consume_token(FUNCTOR);
                      line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR:
          jj_consume_token(DOLLAR);
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case IMPORT:
            ;
            break;
          default:
            jj_la1[47] = jj_gen;
            break label_25;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT:
            jj_consume_token(IMPORT);
            importClause = importClause();
                                                       imports.add(importClause);
            label_26:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[48] = jj_gen;
                break label_26;
              }
              jj_consume_token(COMMA);
              importClause = importClause();
                                                        imports.add(importClause);
            }
            break;
          case EXPORT:
            jj_consume_token(EXPORT);
            exportClause = exportClause();
                                                       exports.add(exportClause);
            label_27:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[49] = jj_gen;
                break label_27;
              }
              jj_consume_token(COMMA);
              exportClause = exportClause();
                                                        exports.add(exportClause);
            }
            break;
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        statement = inStatement();
            out = new Functor(line, name, imports, exports, statement);
        break;
      case CLASS:
        jj_consume_token(CLASS);
                    line = token.beginLine;
        jj_consume_token(DOLLAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
        case EXTENDS:
        case PROP:
          aDescriptor = classDescriptor();
                                              descriptors.add(aDescriptor);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        jj_consume_token(LCURLY);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
          case DEF:
          case EXTENDS:
          case PROP:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_28;
          }
          classElement = classElementDef();
              if(classElement instanceof Method){
                methods.add(classElement);
              } else {
                descriptors.add(classElement);
              }
        }
        jj_consume_token(RCURLY);
            out = new ClassDeclaration(line, name, descriptors, methods);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private ImportClause importClause() throws ParseException {
    int line = 0;
    String name = null;
    String label = null;
    Variable var = null;
    Map<String, Variable> map = new HashMap<String, Variable>();
    String source = null;
    try {
      jj_consume_token(VARIABLE);
                     line = token.beginLine; name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOM:
          jj_consume_token(ATOM);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                    label = token.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          jj_consume_token(VARIABLE);
                                  var = new Variable(token.beginLine, token.image);
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
              map.put(label, var);
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_29;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            jj_consume_token(ATOM);
            break;
          case INT:
            jj_consume_token(INT);
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                     label = token.image; var = null;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
            jj_consume_token(COLON);
            jj_consume_token(VARIABLE);
                                  var = new Variable(token.beginLine, token.image);
            break;
          default:
            jj_la1[58] = jj_gen;
            ;
          }
              map.put(label, var);
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        jj_consume_token(FROM);
        jj_consume_token(ATOM);
                          source = token.image;
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new ImportClause(line, name, map, source);}
    throw new Error("Missing return statement in function");
  }

  static final private ExportClause exportClause() throws ParseException {
    int line = 0;
    String label = null;
    Variable var = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOM:
      case INT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOM:
          jj_consume_token(ATOM);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                           line = token.beginLine; label = token.image;
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(VARIABLE);
          line = (line!=0 ? line : token.beginLine);
          var = new Variable(token.beginLine, token.image);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new ExportClause(line, label, var);}
    throw new Error("Missing return statement in function");
  }

  static final private ClassElement classElementDef() throws ParseException {
    int line = 0;
    MethodHead aMethodHead = null;
    Variable name = null;
    Expression expression = null;
    Statement statement = null;
    Method method = null;
    ClassDescriptor descriptor = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        jj_consume_token(DEF);
                line = token.beginLine;
        aMethodHead = methHead();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          jj_consume_token(VARIABLE);
                                 name = new Variable(line, token.image);
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          expression = inExpression();
          break;
          statement = inStatement();
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            out = new Method(line, aMethodHead, name, expression, statement);
        break;
      case ATTR:
      case EXTENDS:
      case PROP:
        descriptor = classDescriptor();
            out= descriptor;
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private CaseStatementClause caseStatementClause(boolean firstClausePassed) throws ParseException {
    int line = 0;
    CaseStatementClause out = null;
    Statement statement = null;
    Pattern pattern = null;
    Operator op = null;
    ArrayList<Operator> ops = new ArrayList<Operator>();
    Expression expression = null;
    ArrayList<Expression> exprs = new ArrayList<Expression>();
    try {
      pattern = pattern();
                              line = pattern.line();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
        case LOR:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          jj_consume_token(LAND);
                    op = Operator.LAND;
          break;
        case LOR:
          jj_consume_token(LOR);
                    op = Operator.LOR;
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression = conditionalExpression();
            ops.add(op); exprs.add(expression);
      }
      jj_consume_token(IMPL);
      statement = inStatement();
          out = new CaseStatementClause(line, pattern, ops, exprs, statement, !firstClausePassed);
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private CaseExpressionClause caseExpressionClause(boolean firstClausePassed) throws ParseException {
    int line = 0;
    CaseExpressionClause out = null;
    Statement expression = null;
    Pattern pattern = null;
    Operator op = null;
    ArrayList<Operator> ops = new ArrayList<Operator>();
    Expression aExpression = null;
    ArrayList<Expression> exprs = new ArrayList<Expression>();
    try {
      pattern = pattern();
                              line = pattern.line();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
        case LOR:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          jj_consume_token(LAND);
                    op = Operator.LAND;
          break;
        case LOR:
          jj_consume_token(LOR);
                    op = Operator.LOR;
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        aExpression = expression();
            ops.add(op); exprs.add(aExpression);
      }
      jj_consume_token(IMPL);
      expression = inExpression();
          out = new CaseExpressionClause(line, pattern, ops, exprs, expression, !firstClausePassed);
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression assignmentExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = conditionalExpression();
                                        line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case PLUSASS:
      case MINUSASS:
      case DEFINE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          rhs = assignmentExpression();
                  lhs = new OperationAssignment(line, lhs, rhs);
          break;
        case PLUSASS:
          jj_consume_token(PLUSASS);
          rhs = assignmentExpression();
                  lhs = new OperationPlusAssignment(line, lhs, rhs);
          break;
        case MINUSASS:
          jj_consume_token(MINUSASS);
          rhs = assignmentExpression();
                  lhs = new OperationMinusAssignment(line, lhs, rhs);
          break;
        case DEFINE:
          jj_consume_token(DEFINE);
          rhs = assignmentExpression();
                  lhs = new OperationsAssignmentDefine(line, lhs, rhs);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression conditionalExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    try {
      lhs = conditionalOrExpression();
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression conditionalOrExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = conditionalAndExpression();
                                           line = token.beginLine;
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOR:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_32;
        }
        jj_consume_token(LOR);
        rhs = conditionalAndExpression();
              lhs = new OperationLogicalOr(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression conditionalAndExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = equalityExpression();
                                     line = token.beginLine;
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_33;
        }
        jj_consume_token(LAND);
        rhs = equalityExpression();
              lhs = new OperationLogicalAnd(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression equalityExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = relationalExpression();
                                       line = token.beginLine;
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_34;
        }
        jj_consume_token(EQUAL);
        rhs = relationalExpression();
              lhs = new OperationLogicalEqual(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression relationalExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = additiveExpression();
                                     line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          rhs = additiveExpression();
                                              lhs = new OperationLogicalGreaterThan(line, lhs, rhs);
          break;
        case GE:
          jj_consume_token(GE);
          rhs = additiveExpression();
                                                lhs = new OperationLogicalGreaterEqual(line, lhs, rhs);
          break;
        case LT:
          jj_consume_token(LT);
          rhs = additiveExpression();
                                                lhs = new OperationLogicalLessThan(line, lhs, rhs);
          break;
        case LE:
          jj_consume_token(LE);
          rhs = additiveExpression();
                                                lhs = new OperationLogicalLessEqual(line, lhs, rhs);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression additiveExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = multiplicativeExpression();
                                           line = token.beginLine;
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_35;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
                  lhs = new OperationPlus(line, lhs, rhs);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
                  lhs = new OperationMinus(line, lhs, rhs);
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression multiplicativeExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    try {
      lhs = unaryExpression();
                                  line = token.beginLine;
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case MODULO:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_36;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          rhs = unaryExpression();
                  lhs = new OperationMultiplication(line, lhs, rhs);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          rhs = unaryExpression();
                  lhs = new OperationDivision(line, lhs, rhs);
          break;
        case MODULO:
          jj_consume_token(MODULO);
          rhs = unaryExpression();
                  lhs = new OperationModulo(line, lhs, rhs);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression unaryExpression() throws ParseException {
    int line = 0;
    Expression expr = null;
    Expression expr2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
                line = token.beginLine;
        expr2 = unaryExpression();
          expr = new OperationPreIncr(line, expr2);
        break;
      case DEC:
        jj_consume_token(DEC);
                  line = token.beginLine;
        expr2 = unaryExpression();
              expr = new OperationPreDecr(line, expr2);
        break;
      case PLUS:
        jj_consume_token(PLUS);
                   line = token.beginLine;
        expr2 = unaryExpression();
              expr = new OperationValidate(line, expr2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                    line = token.beginLine;
        expr2 = unaryExpression();
              expr = new OperationNegate(line, expr2);
        break;
      case CLASS:
      case DEF:
      case DEFPROC:
      case FALSE:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case NIL:
      case RAISE:
      case SUPER:
      case THIS:
      case THREAD:
      case TRUE:
      case TRY:
      case UNIT:
      case LNOT:
      case UNDERSCORE:
      case DOLLAR:
      case LBRACK:
      case LCURLY:
      case LPAREN:
      case VARIABLE:
      case ATOM:
      case ATOMLISP:
      case STRING:
      case CHARACTER:
      case INT:
      case FLOAT:
        expr = simpleUnaryExpression();
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression simpleUnaryExpression() throws ParseException {
    int line = 0;
    Expression expr = null;
    Expression expr2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LNOT:
        jj_consume_token(LNOT);
                 line = token.beginLine;
        expr2 = unaryExpression();
          expr = new OperatorLogicalNot(line, expr2);
        break;
      case CLASS:
      case DEF:
      case DEFPROC:
      case FALSE:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case NIL:
      case RAISE:
      case SUPER:
      case THIS:
      case THREAD:
      case TRUE:
      case TRY:
      case UNIT:
      case UNDERSCORE:
      case DOLLAR:
      case LBRACK:
      case LCURLY:
      case LPAREN:
      case VARIABLE:
      case ATOM:
      case ATOMLISP:
      case STRING:
      case CHARACTER:
      case INT:
      case FLOAT:
        expr = postfixExpression();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression postfixExpression() throws ParseException {
    int line = 0;
    Expression primaryExpr = null;
    try {
      primaryExpr = primary();
                                  line = primaryExpr.line();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INC:
        case DEC:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_37;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEC:
          jj_consume_token(DEC);
                    primaryExpr = new OperationPostDecr(line, primaryExpr);
          break;
        case INC:
          jj_consume_token(INC);
                      primaryExpr = new OperationPostInc(line, primaryExpr);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return primaryExpr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression primary() throws ParseException {
    int line = 0;
    Expr out = null;
    Expression expr = null;
    Variable variable = null;
    String name = null;
    Expression arg = null;
    ArayList<Expression> args = new ArrayList<Expression>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = parExpression();
        break;
      case THIS:
        jj_consume_token(THIS);
                   line = token.beginLine;
        jj_consume_token(DOT);
        jj_consume_token(VARIABLE);
                               variable = new Variable(line, token.image);
            out = new ExpressionThisAttribute(line, variable);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          label_38:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
            case DEF:
            case DEFPROC:
            case FOR:
            case FUNCTOR:
            case IF:
            case LOCK:
            case MATCH:
            case RAISE:
            case THIS:
            case THREAD:
            case TRY:
            case DOLLAR:
            case LCURLY:
            case LPAREN:
            case VARIABLE:
            case ATOM:
            case ATOMLISP:
              ;
              break;
            default:
              jj_la1[85] = jj_gen;
              break label_38;
            }
            arg = expression();
                                         args.add(arg);
            label_39:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[86] = jj_gen;
                break label_39;
              }
              jj_consume_token(COMMA);
              arg = expression();
                                                     args.add(arg);
            }
          }
          jj_consume_token(RPAREN);
                  out = new ExpressionThisMethod(line, variable, args);
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        break;
      case SUPER:
        jj_consume_token(SUPER);
                    line = token.beginLine;
        jj_consume_token(LPAREN);
        jj_consume_token(VARIABLESTRICT);
                                        name = token.image;
        jj_consume_token(RPAREN);
        jj_consume_token(DOT);
        jj_consume_token(VARIABLE);
                               variable = new Variable(token.beginLine, token.image);
            out = new ExpressionSuperAttribute(line, name, variable);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          label_40:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
            case DEF:
            case DEFPROC:
            case FOR:
            case FUNCTOR:
            case IF:
            case LOCK:
            case MATCH:
            case RAISE:
            case THIS:
            case THREAD:
            case TRY:
            case DOLLAR:
            case LCURLY:
            case LPAREN:
            case VARIABLE:
            case ATOM:
            case ATOMLISP:
              ;
              break;
            default:
              jj_la1[88] = jj_gen;
              break label_40;
            }
            arg = expression();
                                         args.add(arg);
            label_41:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[89] = jj_gen;
                break label_41;
              }
              jj_consume_token(COMMA);
              arg = expression();
                                                     args.add(arg);
            }
          }
          jj_consume_token(RPAREN);
                  out = new ExpressionSuperMethod(line, variable, args);
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        break;
      case FALSE:
      case NIL:
      case TRUE:
      case UNIT:
      case UNDERSCORE:
      case STRING:
      case CHARACTER:
      case INT:
      case FLOAT:
        out = literal();
        break;
      case VARIABLE:
        out = qualifiedIdentifier();
        break;
      case CLASS:
      case DEF:
      case DEFPROC:
      case FOR:
      case FUNCTOR:
      case IF:
      case LOCK:
      case MATCH:
      case RAISE:
      case THREAD:
      case TRY:
      case DOLLAR:
      case LBRACK:
      case LCURLY:
      case ATOM:
      case ATOMLISP:
        out = initializer();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression qualifiedIdentifier() throws ParseException {
    int line = 0;
    Expression out = null;
    Variable var = null;
    Variable var = null;
    Expression arg = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
    try {
      jj_consume_token(VARIABLE);
                     line = token.beginLine; var = new Variable(line, token.image); out = var;
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_42;
        }
        jj_consume_token(DOT);
        jj_consume_token(VARIABLE);
              var2 = new Variable(token.beginLine, token.image);
            out = new ExpressionSelectionAttribute(line, var, var2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          label_43:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
            case DEF:
            case DEFPROC:
            case FOR:
            case FUNCTOR:
            case IF:
            case LOCK:
            case MATCH:
            case RAISE:
            case THIS:
            case THREAD:
            case TRY:
            case DOLLAR:
            case LCURLY:
            case LPAREN:
            case VARIABLE:
            case ATOM:
            case ATOMLISP:
              ;
              break;
            default:
              jj_la1[93] = jj_gen;
              break label_43;
            }
            arg = expression();
                                         args.add(arg);
            label_44:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[94] = jj_gen;
                break label_44;
              }
              jj_consume_token(COMMA);
              arg = expression();
                                                     args.add(arg);
            }
          }
          jj_consume_token(RPAREN);
                  out = new ExpressionSelectionMethod(line, var, var2, args);
          break;
        default:
          jj_la1[95] = jj_gen;
          ;
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression initializer() throws ParseException {
    int line = 0;
    Expression out = null;
    Expression element = null;
    ArrayList<Expression> elements = new ArrayList<Expression>();
    try {
      if (jj_2_2(2147483647)) {
        element = expression();
          line = element.line(); elements.add(element);
        label_45:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASHTAG:
            ;
            break;
          default:
            jj_la1[96] = jj_gen;
            break label_45;
          }
          jj_consume_token(HASHTAG);
          element = expression();
              elements.add(element);
        }
          out = new ExpressionTupleInit(line, elements);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          jj_consume_token(LBRACK);
                   line = token.beginLine;
          label_46:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
            case DEF:
            case DEFPROC:
            case FOR:
            case FUNCTOR:
            case IF:
            case LOCK:
            case MATCH:
            case RAISE:
            case THIS:
            case THREAD:
            case TRY:
            case DOLLAR:
            case LCURLY:
            case LPAREN:
            case VARIABLE:
            case ATOM:
            case ATOMLISP:
              ;
              break;
            default:
              jj_la1[97] = jj_gen;
              break label_46;
            }
            element = expression();
                  elements.add(element);
            label_47:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COLCOL:
                ;
                break;
              default:
                jj_la1[98] = jj_gen;
                break label_47;
              }
              jj_consume_token(COLCOL);
              element = expression();
                      elements.add(element);
            }
          }
          jj_consume_token(RBRACK);
          out = new ExpressionListInit(line, elements);
          break;
        default:
          jj_la1[101] = jj_gen;
          if (jj_2_3(2147483647)) {
            element = expression();
                                 line = token.beginLine; elements.add(element);
            label_48:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COLCOL:
                ;
                break;
              default:
                jj_la1[99] = jj_gen;
                break label_48;
              }
              jj_consume_token(COLCOL);
                       line = token.beginLine;
              element = expression();
                                     elements.add(element);
            }
          out = new ExpressionListInit(line, elements, true);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NIL:
              jj_consume_token(NIL);
                    out = new ExpressionListInit(line, elements, false);
              break;
            default:
              jj_la1[100] = jj_gen;
              ;
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression literal() throws ParseException {
    int line = 0;
    Expr out = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        jj_consume_token(UNIT);
                 out = new Literal(token.beginLine, Literal.UNIT);
        break;
      case TRUE:
        jj_consume_token(TRUE);
                   out = new Literal(token.beginLine, Literal.BOOLEAN, true);
        break;
      case FALSE:
        jj_consume_token(FALSE);
                    out = new Literal(token.beginLine, Literal.BOOLEAN, false);
        break;
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
                         out = new Literal(token.beginLine, Literal.UNDERSCORE);
        break;
      case NIL:
        jj_consume_token(NIL);
                  out = new Literal(token.beginLine, Literal.NIL);
        break;
      case INT:
        jj_consume_token(INT);
                  out = new Literal(token.beginLine, Literal.INT, token.image);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
                    out = new Literal(token.beginLine, Literal.FLOAT, token.image);
        break;
      case STRING:
        jj_consume_token(STRING);
                     out = new Literal(token.beginLine, Literal.STRING, token.image);
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
                        out = new Literal(token.beginLine, Literal.CHAR, token.image);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Term term() throws ParseException {
    int line = 0;
    int lostLabelsCounter = 1;
    Expression out = null;
    boolean bool = true;
    String value = null;
    Feature aFeature = null;
    Expression val = null;
    Map<Feature, Expression> map = new HashMap<Feature, Expression>();
    ArrayList<Expression> args = new ArrayList<Expression>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOM:
        jj_consume_token(ATOM);
                out = new Term(token.beginLine, Term.ATOM, token.image);
        break;
      case ATOMLISP:
        jj_consume_token(ATOMLISP);
                       line = token.beginLine; value = token.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FOR:
        case FUNCTOR:
        case IF:
        case LOCK:
        case MATCH:
        case RAISE:
        case THIS:
        case THREAD:
        case TRY:
        case DOLLAR:
        case LCURLY:
        case LPAREN:
        case VARIABLE:
        case ATOM:
        case ATOMLISP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOMLISP:
            aFeature = feature();
            jj_consume_token(COLON);
                                           map.put(aFeature, null);
            break;
          default:
            jj_la1[103] = jj_gen;
            ;
          }
          val = expression();
            if(aFeature==null){
              map.put(labelCounter, val);
              lostLabelsCounter++;
            } else {
              map.put(aFeature, val);
            }
          label_49:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[104] = jj_gen;
              break label_49;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ATOMLISP:
              aFeature = feature();
              jj_consume_token(COLON);
                                            map.put(aFeature, null);
              break;
            default:
              jj_la1[105] = jj_gen;
              ;
            }
            val = expression();
              if(aFeature==null){
                map.put(labelCounter, val);
                lostLabelsCounter++;
              } else {
                map.put(aFeature, val);
              }
          }
          break;
        default:
          jj_la1[106] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
            out = new Record(line, value, map);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final private Pattern pattern() throws ParseException {
    int line = 0;
    int lostLabelsCounter = 1;
    Pattern out = null;
    boolean bool = true;
    String value = null;
    Feature aFeature = null;
    Expression val = null;
    Map<Feature, Pattern> map = new HashMap<Feature, Pattern>();
    bool more = false;
    Pattern pat1 = null;
    Operator op = null;
    Pattern pat2 = null;
    ArrayList<Pattern> patterns = new ArrayList<Pattern>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        jj_consume_token(UNIT);
                 out = new Term(token.beginLine, Term.UNIT);
        break;
      case TRUE:
        jj_consume_token(TRUE);
                   out = new Term(token.beginLine, Term.BOOLEAN, true);
        break;
      case FALSE:
        jj_consume_token(FALSE);
                    out = new Term(token.beginLine, Term.BOOLEAN, false);
        break;
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
                         out = new Term(token.beginLine, Term.UNDERSCORE);
        break;
      case NIL:
        jj_consume_token(NIL);
                  out = new Term(token.beginLine, Term.NIL);
        break;
      case INT:
        jj_consume_token(INT);
                  out = new Term(token.beginLine, Term.INT, token.image);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
                    out = new Term(token.beginLine, Term.FLOAT, token.image);
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
                        out = new Term(token.beginLine, Term.CHAR, token.image);
        break;
      case ATOM:
        jj_consume_token(ATOM);
                  out = new Term(token.beginLine, Term.ATOM, token.image);
        break;
      case STRING:
        jj_consume_token(STRING);
                     out = new Term(token.beginLine, Term.STRING, token.image);
        break;
      case LNOT:
      case VARIABLE:
        label_50:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LNOT:
            ;
            break;
          default:
            jj_la1[108] = jj_gen;
            break label_50;
          }
          jj_consume_token(LNOT);
                  bool = !bool;
        }
        jj_consume_token(VARIABLE);
                       line = token.beginLine; value = token.image;
          out = new Term(line, Term.UNKNOWN, value, bool);
        break;
      case ATOMLISP:
        jj_consume_token(ATOMLISP);
                       line = token.beginLine; value = token.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case LNOT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOM:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOMLISP:
            aFeature = feature();
            jj_consume_token(COLON);
                                            map.put(aFeature, null);
            break;
          default:
            jj_la1[109] = jj_gen;
            ;
          }
          val = pattern();
             if(aFeature==null){
               map.put(labelCounter, val);
               lostLabelsCounter++;
             } else {
               map.put(aFeature, val);
             }
          label_51:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[110] = jj_gen;
              break label_51;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ATOMLISP:
              aFeature = feature();
              jj_consume_token(COLON);
                                             map.put(aFeature, null);
              break;
            default:
              jj_la1[111] = jj_gen;
              ;
            }
            val = pattern();
               if(aFeature==null){
                 map.put(labelCounter, val);
                 lostLabelsCounter++;
               } else {
                 map.put(aFeature, val);
               }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            jj_consume_token(ELLIPSIS);
                                 more = true;
            break;
          default:
            jj_la1[112] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[113] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
             out = new PatternRecord(line, value, map, more);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
                     line = token.beginLine;
        pat1 = pattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASHTAG:
          jj_consume_token(HASHTAG);
                       op = Operator.HASHTAG;
          break;
        case COLCOL:
          jj_consume_token(COLCOL);
                       op = Operator.COLCOL;
          break;
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        pat2 = pattern();
        jj_consume_token(RPAREN);
            out = new PatternUnion(line, pat1, pat2, op);
        break;
      case LBRACK:
        jj_consume_token(LBRACK);
                     line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case LNOT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOM:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          pat1 = pattern();
                               patterns.add(pat1);
          label_52:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[115] = jj_gen;
              break label_52;
            }
            jj_consume_token(COMMA);
            pat1 = pattern();
                                 patterns.add(pat1);
          }
          break;
        default:
          jj_la1[116] = jj_gen;
          ;
        }
        jj_consume_token(RBRACK);
            out = new PatternListInit(line, patterns);
        break;
        jj_consume_token(LPAREN);
                     line = token.beginLine;
        pat1 = pattern();
                             out = pat1;
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private DeclarationPart declarationPart() throws ParseException {
    int line = 0;
    boolean constant;
    DeclarationPart out = null;
    Variable variable = null;
    Expression value = null;
    Map<Variable, Expression> map = new HashMap<Variable, Expression>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAL:
      case VAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAL:
          jj_consume_token(VAL);
                    line = token.beginLine; constant = true;
          break;
        case VAR:
          jj_consume_token(VAR);
                    line = token.beginLine; constant = false;
          break;
        default:
          jj_la1[118] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(VARIABLE);
                       variable = new Variable(line, token.image); map.put(variable, null);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          value = expression();
            map.put(variable, value);
          break;
        default:
          jj_la1[119] = jj_gen;
          ;
        }
        label_53:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[120] = jj_gen;
            break label_53;
          }
          jj_consume_token(COMMA);
          jj_consume_token(VARIABLE);
                                 variable = new Variable(line, token.image); map.put(variable, null);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
            jj_consume_token(ASSIGN);
            value = expression();
              map.put(variable, value);
            break;
          default:
            jj_la1[121] = jj_gen;
            ;
          }
        }
            out = new DeclarationPart(line, map, constant);
        break;
      case CLASS:
      case DEF:
      case DEFPROC:
      case FUNCTOR:
        out = nestDecVariable();
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private LoopDeclaration loopDeclaration() throws ParseException {
    int line = 0;
    LoopDeclaration out = null;
    Variable var = null;
    Expression generator = null;
    Expression init = null;
    Expression cond = true;
    Expression step = 1;
    Expression end = null;
    Feature feat = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
                     line = token.beginLine; var = new Variable(line, token.image);
        jj_consume_token(IN);
        init = expression();
        jj_consume_token(DOTDOT);
        end = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          jj_consume_token(SEMI);
          step = expression();
          break;
        default:
          jj_la1[123] = jj_gen;
          ;
        }
            out = new LoopDeclaration(line, var, init, cond, step, end);
        break;
        jj_consume_token(VARIABLE);
                       line = token.beginLine; var = new Variable(line, token.image);
        jj_consume_token(IN);
        init = expression();
        jj_consume_token(SEMI);
        step = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          jj_consume_token(SEMI);
          end = expression();
              cond=step; step=end;
          break;
        default:
          jj_la1[124] = jj_gen;
          ;
        }
            out = new LoopDeclaration(line, var, init, cond, step, null);
        break;
        jj_consume_token(VARIABLE);
                       line = token.beginLine; var = new Variable(line, token.image);
        jj_consume_token(IN);
        generator = expression();
            out = new LoopDeclaration(line, var, generator);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private Feature feature() throws ParseException {
    int line = 0;
    String image = null;
    try {
      jj_consume_token(ATOMLISP);
                     line = token.beginLine; image = token.image;
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new Feature(line, image);}
    throw new Error("Missing return statement in function");
  }

  static final private ClassDescriptor classDescriptor() throws ParseException {
    int line = 0;
    ClassDescriptor out = null;
    ArrayList<String> extensions = new ArrayList<String>();
    Variable var = null;
    Expression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
                    line = token.beginLine;
        jj_consume_token(VARIABLESTRICT);
                             extensions.add(token.image);
        label_54:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[126] = jj_gen;
            break label_54;
          }
          jj_consume_token(COMMA);
          jj_consume_token(VARIABLESTRICT);
                               extensions.add(token.image);
        }
            out = new Classdescriptor(line, "extension", extensions);
        break;
      case ATTR:
        jj_consume_token(ATTR);
                   line = token.beginLine;
        jj_consume_token(VARIABLE);
                       var = new Variable(line, token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          expr = expression();
          break;
        default:
          jj_la1[127] = jj_gen;
          ;
        }
            out = new ClassDescriptor(line, "attribute", var, expr);
        break;
      case PROP:
        jj_consume_token(PROP);
                   line = token.beginLine;
        jj_consume_token(VARIABLE);
            var = new Variable(line, token.image);
            out = new ClassDescriptor(line, "property", var, expr);
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  static final private MethodHead methHead() throws ParseException {
    int line = 0;
    MethodHead out = null;
    boolean priv = false;
    String name = null;
    MethodArg arg = null;
    ArrayList<MethodArg> args = new ArrayList<MethodArg>();
    boolean moreArgs = false;
    boolean isAFunction = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLESTRICT:
        jj_consume_token(VARIABLESTRICT);
                             line = token.beginLine; priv = true; name = token.image;
        break;
      case ATOMLISP:
        jj_consume_token(ATOMLISP);
                         line = token.beginLine; priv = false; name = token.image;
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        arg = methArg();
                            args.add(arg);
        label_55:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[130] = jj_gen;
            break label_55;
          }
          jj_consume_token(COMMA);
          arg = methArg();
                                      args.add(arg);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(ELLIPSIS);
              moreArgs = true;
          break;
        default:
          jj_la1[131] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR:
          jj_consume_token(DOLLAR);
                       isAFunction = true;
          break;
        default:
          jj_la1[132] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[133] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new MethodHead(line, name, priv, args, moreArgs, isAFunction);}
    throw new Error("Missing return statement in function");
  }

  static final private MethodArg methArg() throws ParseException {
    int line = 0;
    Feature feature = null;
    String name = null;
    Expression defaultValue = null;
    try {
      feature = feature();
                              feature.line();
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
                       priv = true; name = token.image;
        break;
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
                           name = token.image;
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
        jj_consume_token(LE);
        defaultValue = expression();
        break;
      default:
        jj_la1[135] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new MethodArg(line, feature, name, defaultValue);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_130() {
    if (jj_3R_174()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_302() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(SKP)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_287() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_278() {
    if (jj_3R_285()) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_277() {
    if (jj_3R_284()) return true;
    return false;
  }

  static private boolean jj_3R_276() {
    if (jj_3R_283()) return true;
    return false;
  }

  static private boolean jj_3R_209() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_282() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_287()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_301() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_scan_token(LOR)) return true;
    return false;
  }

  static private boolean jj_3R_286() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_301()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(THREAD)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_206() {
    if (jj_scan_token(LAND)) return true;
    return false;
  }

  static private boolean jj_3R_275() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(DOTDOT)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(RAISE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_281() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_143()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IMPL)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_274() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_273() {
    if (jj_3R_132()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_271() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3R_112()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_110()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_228() {
    if (jj_scan_token(LOR)) return true;
    return false;
  }

  static private boolean jj_3R_227() {
    if (jj_scan_token(LAND)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    if (jj_3R_174()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_280() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IMPL)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_279() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  static private boolean jj_3R_272() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    if (jj_scan_token(VARIABLE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_270() {
    if (jj_3R_271()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_221() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_269() {
    if (jj_3R_270()) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_scan_token(DEF)) return true;
    if (jj_3R_219()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    return false;
  }

  static private boolean jj_3R_268() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  static private boolean jj_3R_267() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_116()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(LBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    if (jj_scan_token(COLCOL)) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    if (jj_scan_token(HASHTAG)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    if (jj_3R_116()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_263() {
    if (jj_3R_267()) return true;
    return false;
  }

  static private boolean jj_3R_212() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_262() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(THREAD)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_261() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(RAISE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_260() {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3R_259() {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_177()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(ATOMLISP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_scan_token(LNOT)) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3R_137()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_176()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3R_266() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_237() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_265() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_231() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_135()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_230() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  static private boolean jj_3R_264() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  static private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_132()) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_132()) return true;
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_249() {
    if (jj_3R_255()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_258() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3R_257() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  static private boolean jj_3R_250() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_164()) return true;
    return false;
  }

  static private boolean jj_3R_247() {
    if (jj_3R_249()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(LCURLY)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3R_254() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_253() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_252() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(ATOMLISP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_251() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  static private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(FUNCTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_246() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_242() {
    if (jj_3R_247()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_245() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(LAZY)) return true;
    return false;
  }

  static private boolean jj_3R_244() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(DEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_238() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(DEFPROC)) return true;
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_243() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_59()) return true;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_296() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_295() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_294() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_293() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_292() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3R_291() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  static private boolean jj_3R_290() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_289() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_288() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_3R_242()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_241() {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  static private boolean jj_3R_240() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_239() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  static private boolean jj_3R_236() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  static private boolean jj_3R_234() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_238()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_233() {
    if (jj_scan_token(ATOMLISP)) return true;
    return false;
  }

  static private boolean jj_3R_307() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_232() {
    if (jj_scan_token(VARIABLESTRICT)) return true;
    return false;
  }

  static private boolean jj_3R_306() {
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_309() {
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_3R_235()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_300() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_305() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_3R_164()) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(HASHTAG)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_299() {
    if (jj_scan_token(LBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    if (jj_scan_token(LCURLY)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_304() {
    if (jj_scan_token(HASHTAG)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_226() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_298() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_304()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_scan_token(PROP)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_3R_225()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  static private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(FUNCTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_310() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(LAZY)) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(DEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_308() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_3R_200()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_303() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_308()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(DEFPROC)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_297() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_scan_token(DEFINE)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_scan_token(MINUSASS)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(PLUSASS)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_284() {
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_scan_token(ATOMLISP)) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaCCParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[136];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40190000,0xd4190000,0xd4190000,0xd41d0000,0xd4190000,0xd0190000,0x40190000,0xd4190000,0x40190000,0xd0190000,0x0,0x800000,0x800000,0x4000,0x800000,0x0,0x4000,0x8000,0x8000000,0x0,0xd4190000,0x0,0x800000,0x800000,0x4000,0x800000,0x0,0x4000,0x8000,0x8000000,0x0,0x90000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x2001000,0x2081000,0x40190000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x2001000,0x2081000,0x40190000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x2081000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd4190000,0xd4190000,0x0,0x0,0xd0190000,0x0,0x0,0xd0190000,0x0,0x0,0xd4190000,0x0,0xd0190000,0x0,0x0,0x0,0xd0190000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0xd0190000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x40190000,0x0,0x0,0x0,0x0,0x0,0x2001000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xc0000,0x3fe58,0x3f258,0x3f258,0x3fe58,0x16218,0xc0000,0x3fe58,0xc0000,0x16218,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f258,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14218,0x0,0x4,0x0,0x0,0x1,0x0,0x0,0x1,0x100,0x100,0x0,0x0,0x4,0x0,0x0,0x1,0x0,0x0,0x1,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x100,0x0,0x0,0x0,0x0,0xf00000,0xf00000,0x0,0x0,0x1000000,0x3c000000,0x3c000000,0x0,0x0,0x0,0x0,0x3f258,0x3f258,0x0,0x0,0x16218,0x0,0x0,0x16218,0x0,0x0,0x3f258,0x0,0x16218,0x0,0x0,0x0,0x16218,0x0,0x0,0x40,0x0,0x28040,0x0,0x0,0x0,0x16218,0x0,0x0,0x0,0x0,0x0,0x0,0x28040,0x0,0x0,0x28040,0x28040,0xc0000,0x100000,0x0,0x100000,0xc0000,0x0,0x0,0x0,0x0,0x100000,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x47006334,0x7006334,0x7006334,0x47006334,0x4004000,0x0,0x47006334,0x0,0x6004000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x7006334,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x800000,0x0,0x800000,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x4000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x800000,0x0,0x80000000,0x4000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x3,0x3,0x3,0x3,0x0,0x0,0x2,0x1,0x0,0x0,0x0,0x30,0x30,0x8c0,0x8c0,0x7006334,0x7006004,0x300,0x300,0x6004000,0x800000,0x4000000,0x6004000,0x800000,0x4000000,0x7006000,0x0,0x6004000,0x800000,0x4000000,0x1000,0x6004000,0x400000,0x400000,0x0,0x1000000,0x2000,0x0,0x800000,0x0,0x6004000,0x0,0x4,0x0,0x800000,0x0,0x800000,0x5002004,0x401000,0x800000,0x5002004,0x5002004,0x0,0x0,0x800000,0x0,0x0,0x40000000,0x40000000,0x0,0x800000,0x0,0x0,0x0,0x800000,0x800000,0x4000,0x4000000,0x2000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x7f0,0x7f0,0x7f0,0x7f0,0x70,0x0,0x7f0,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x7f0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220,0x0,0x0,0x220,0x0,0x0,0x0,0x220,0x220,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f0,0x7f0,0x0,0x0,0x70,0x0,0x0,0x70,0x0,0x0,0x7f0,0x1,0x70,0x0,0x0,0x0,0x70,0x0,0x0,0x0,0x0,0x780,0x40,0x0,0x40,0x70,0x60,0x0,0x40,0x0,0x40,0x0,0x7f0,0x0,0x0,0x7f0,0x7f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x48,0x0,0x0,0x0,0x0,0x10,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaCCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaCCParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaCCParser(JavaCCParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[125];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 136; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 125; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
