// Copyright 2011 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// This is the input file to JavaCC for generating a scanner and
// a parser for newOz. From the specification in this file, JavaCC,
// among other files, generates a JavaCCParser.java file
// under this directory. This file is the parser. The code
// between  PARSER_BEGIN( JavaCCParser ) and
// PARSER_END( JavaCCParser ) is copied verbatim to this file. JavaCC
// also generates a JavaCCParserTokenManager.java file which is the
// scanner.

PARSER_BEGIN( JavaCCParser )

package com.barassolutions;

import com.barassolutions.core.*;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Parser generated by JavaCC. It parses a newOz program file, taking tokens from the scanner
 * (also generated by JavaCC), and produces an abstract syntax tree (AST) for it.
 */

class JavaCCParser {
    /** Whether a parser error has been found. */
    private boolean errorHasOccurred;

    /** Name of the file that is being parsed. */
    private String fileName;

    /**
     * Pull out the ambiguous part of a name and return it.
     *
     * @param name with an ambiguous part (possibly).
     * @return ambiguous part or null.
     */ //TODO what do we do with this ?
    private AmbiguousName ambiguousPart(TypeName name) {
        String qualifiedName = name.toString();
        int lastDotIndex = qualifiedName.lastIndexOf('.');
        return lastDotIndex == -1
            ? null // It was a simple name
            : new AmbiguousName(name.line(), qualifiedName.substring( 0, lastDotIndex));
    }

    /**
     * Report a syntax error.
     *
     * @param message message identifying the error.
     * @param args related values.
     */
    private void reportParserError(String message, Object... args) {
        errorHasOccurred = true;
        System.err.printf("%s:%d: ", fileName, token.beginLine);
        System.err.printf(message, args);
        System.err.println();
    }

    /**
     * Recover from the parser error that occurred by skipping to
     * any of the specified tokens.
     *
     * Current error recovery mechanism is rather simple-minded and is
     * based on skipping all the tokens until a new line or an EOF is
     * encountered. This scheme can be enhanced by passing in the
     * FOLLOW-SET of the non-terminal at hand.
     *
     * @param skipTo array of tokens that we could skip to.
     * @param e exception that is raised by JavaCC in the event
     * of a parser error.
     */
    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[ i ].length; j++) {
                expected.append("\n");
                expected.append("\t");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\"%s\" found where %s sought", getToken( 1 ), expected);
        } else {
            reportParserError("\"%s\" found where one of %s sought", getToken(1), expected);
        }

        // Recover
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i : skipTo) {
                if (token.kind == i) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

    /**
     * Set the name of the file that is being parsed.
     *
     * @param fileName name of the file.
     */
    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Has a parser error occurred up to now?
     *
     * @return true or false.
     */
    public boolean errorHasOccurred() {
        return errorHasOccurred;
        }
}

PARSER_END( JavaCCParser )

/////////////////////////////////////////////////////////
//         The newOz lexical grammar starts here       //
/////////////////////////////////////////////////////////

// Whitespace -- ignored
SKIP: {" "|"\b"|"\t"|"\n"|"\r"|"\f"}//|"\v"}

// Single-line comment -- ignored
SKIP: {<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>}

// Multi-line comment -- ignored
SKIP: {"/*" : MULTI_COMMENT}
<MULTI_COMMENT>
SKIP : {"*/" : DEFAULT | < ~[] >}

// Reserved words
TOKEN : {
  < AT: "at" >
| < ATTR: "attr" >
| < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
//| < CHOICE: "choice" > //TODO What's this ?
| < CLASS: "class" >
//| < COLLECT: "collect" > //TODO What's this ?
//| < COND: "cond" > //TODO What's this ?
| < CONTINUE: "continue" >
| < DECLARE: "declare" >
| < DEF: "def" >
| < DEFPROC: "defproc" >
| < DEFLT: "default" >
//| < DEFINE: "define" >
//| < DIS: "dis" > //TODO What's dis ?
| < DO: "do" >
| < ELSE: "else" >
//| < ELSECASE: "elsecase" >
//| < ELSEOF: "elseof" >
| < EXPORT: "export" >
| < EXTENDS: "extends" >
//| < FAIL: "fail" > //TODO What's this ?
| < FALSE: "false" >
//| < FEAT: "feat" > //TODO What's this ?
| < FINALLY: "finally" >
| < FOR: "for" >
| < FROM: "from" >
| < FUNCTOR: "functor" >
| < IF: "if" >
| < IMPORT: "import" >
| < IN: "in" >
| < LAZY: "lazy" >
| < LOCK: "lock" >
| < MATCH: "match" >
| < METH: "meth" >
| < NIL: "nil" >
//| < NOT: "not" > //TODO What's this ?
//| < OF: "of" >
| < OR: "or" >
//| < PREPARE: "prepare" > //TODO What's this ?
| < PROP: "prop" >
| < RAISE: "raise" >
//| < REQUIRE: "require" > //TODO What's this ?
| < RETURN: "return" >
| < SKP: "skip" >
| < SUPER: "super" >
| < THIS: "this" >
| < THREAD: "thread" >
| < TRUE: "true" >
| < TRY: "try" >
| < UNIT: "unit" >
| < VAL: "val" >
| < VAR: "var" >
}

// Operators
TOKEN : {
  <ASSIGN: "=">
| <PLUSASSIGN: "+=">
| <MINUSASSIGN: "-=">
| <DEFINE: ":=">
| <EQUAL: "==">
| <NE: "\\=">
| <LT: "<">
| <GT: ">">
| <LE: "=<">
| <GE: ">=">
| <LBARROW: "<=">
| <IMPL: "=>">
//| <AND: "&"> //TODO DELETED
| <LAND: "&&">
//| <PIPE: "|"> //TODO DELETED
| <LOR: "||">
| <LNOT: "!">
| <LNOTNOT: "!!">
| <MINUS: "-">
| <PLUS: "+">
| <STAR: "*">
//| <STARSTAR: "**">
| <SLASH: "/">
| <INC: "++">
| <DEC: "--">
| <BACKSLASH: "\\">
| <MODULO: "%">
| <HASHTAG: "#">
| <UNDERSCORE: "_">
| <DOLLAR: "$">
| <APOSTROPHE: "'">
| <QUOTE: "\"">
| <LACCENT: "`">
| <RACCENT: "´">
| <HAT: "^">
| <BOX: "[]">
//| <TILDE: "~">
| <DEGREE: "°">
//| <COMMERCAT: "@">
//| <LARROW: "<-">
//| <RARROW: "->">
//| <FDASSIGN: "=:">
//| <FDNE: "\\=:">
//| <FDLT: "<:">
//| <FDLE: "=<:">
//| <FDGT: ">:">
//| <FDGE: ">=:">
| <COLCOL: "::">
//| <COLCOLCOL: ":::">
}

// Separators
TOKEN : {
 <COMMA: ",">
| <LBRACK: "[">
| <LCURLY: "{">
| <LPAREN: "(">
| <RBRACK: "]">
| <RCURLY: "}">
| <RPAREN: ")">
| <SEMI: ";">
| <COLON: ":">
| <DOT: ".">
| <DOTDOT: "..">
| <ELLIPSIS: "...">
}

// Identifiers & litterals
TOKEN : {
  < VARIABLESTRICT: ((<UPPERCASE>(<ALPHANUM>)*) | "`"(<ESC> | <PSEUDO_CHAR> | ~["`","\\","\n","\r"])"`") >
| < VARIABLE: <LOWERCASE>(<ALPHANUM>)* >
| < ATOM: (<ATOMLISP> | "´" (<ESC>| <PSEUDO_CHAR> | ~["´","\\","\n","\r"]) "´") >
| < ATOMLISP: <APOSTROPHE> (<LOWERCASE>|<UPPERCASE>) (<ALPHANUM>)* >
//| < LABEL: (<VARIABLE>|<ATOM>|<BOOLEAN>|<UNIT>) >
| < STRING: "\"" (<ESC>| <PSEUDO_CHAR> | ~["\"","\\","\n","\r"]) "\"" >
| < CHARACTER: (<DEGREE>(<CHARCHAR> | <PSEUDO_CHAR>) | <CHARINT>) >
| < INT: (<DECINT> | <HEXINT> | <OCTINT> | <BININT>) >
| < FLOAT: (<MINUS>)? (<DIGIT>)+ <DOT> (<DIGIT>)* (("e"|"E")("~")?(<DIGIT>)+)? >
//| < BOOLEAN: (<TRUE> | <FALSE>) >

| < #UPPERCASE: ["A"-"Z"] >
| < #LOWERCASE: ["a"-"z"] >
| < #DIGIT: ["0"-"9"] >
| < #NON_ZERO_DIGIT: ["1"-"9"] >
| < #CHARINT: (["0"-"9"]|["1"-"9"]["0"-"9"]|"1"["0"-"9"]["0"-"9"]|"2"["0"-"4"]["0"-"9"]|"25"["0"-"5"])> // [0-255]
| < #ALPHANUM: (<UPPERCASE> | <LOWERCASE> | <DIGIT> | <UNDERSCORE>) >
| < #DECINT: (<MINUS>)? (<DIGIT> | <NON_ZERO_DIGIT>(<DIGIT>)*) >
| < #HEXINT: (<MINUS>)? "0" ("x"|"X") (<HEXDIGIT>)+ >
| < #OCTINT: (<MINUS>)? "0" (<OCTDIGIT>)+ >
| < #BININT: (<MINUS>)? "0" ("b"|"B") (<BINDIGIT>)+ >
| < #OCTDIGIT: ["0"-"7"] >
| < #HEXDIGIT: (<DIGIT> | ["A"-"F"] | ["a"-"f"]) >
| < #BINDIGIT: ["0"-"1"] >

| < #ESCAPE_CHAR: ("a"|"b"|"f"|"n"|"r"|"t"|<BACKSLASH>|<APOSTROPHE>|<QUOTE>|<DEGREE>) > //TODO <LACCENT> here iff it is present in <VARIABLESTRICT definition
| < #ESC: <BACKSLASH> <ESCAPE_CHAR> >
| < #CHARCHAR: ~["\\"] >
// In the classes of words <variable>, <atom>, <string>, and <character> we use pseudo-characters,
// which represent single characters in different notations.
| < #PSEUDO_CHAR: (<BACKSLASH><OCTDIGIT><OCTDIGIT><OCTDIGIT>) | (<BACKSLASH>("x"|"X")<HEXDIGIT><HEXDIGIT>) >
}

// For anything else, we return an ERROR token. Without this
// definition the TokenManager will throw an Error when a lexical
// error occurs, making it impossible to recover from it. So we
// define this ERROR token.
TOKEN:
{
 < ERROR: ~[] >
}

/////////////////////////////////////////////////////////
//       The newOz syntactic grammar starts here         //
/////////////////////////////////////////////////////////
// Constructed from http://mozart2.org/mozart-v1/doc-1.4.0/notation/node3.html#chapter.context-free

/**
 * Parse an interactive statement and construct an AST
 * for it. After constructing the Parser, this is its entry point.
 *
 * <pre>
 *   interStatement ::= statement
 *                      | DECLARE LCURLY {declarationPart}+ [interStatement] RCURLY EOF
 * </pre>
 *
 * @return an AST for an interStatement.
 */
private InterStatement interStatement(): {
    int line = 0;
    DeclarationPart aDeclarationPart = null;
    ArrayList<DeclarationPart> declarations = new ArrayList<DeclarationPart>();
    InterStatement interStatement = null;
    InterStatement out = null;
}
{
    try {
      (<DECLARE> <LCURLY> { line = token.beginLine; }
      (
          aDeclarationPart = declarationPart()
          { declarations.add(aDeclarationPart); }
      )*
      [
          interStatement = interStatement()
      ]
      <RCURLY> <EOF>
      { out = new InterStatement(line, declarations, interStatement); }) //Declare block
      |
      ( interStatement = statement()
      { line = token.beginLine;
        out = new InterStatement(line, interStatement); //Stand-alone statement
      })
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{EOF}, e);
    }
    { return out; }
}


/**
 * Parse a statement.
 *
 * <pre>
 *   statement ::= nestConStatement
 *                  | nestDecVariable
 *                  | SKIP
 *                  | SEMI
 *                  //| DECLARE statement
 *                  | RETURN expression
 * </pre>
 *
 * @return an AST for a statement.
 */
private Statement statement(): {
    int line = 0;
    Statement statement = null;
}
{
    try {
        statement = nestConStatement() { line = token.beginLine; }
        | statement = nestDecVariable() { line = token.beginLine; }
        | <SKP>
          { line = token.beginLine;
          statement = new SkipStatement(line); } |
        <SEMI> //Ignore it
        //| <DECLARE> statement = statement() { line = token.beginLine; }
        | <RETURN> { line = token.beginLine; }
          expression = expression()
          { statement = new ReturnStatement(line, expression); }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{EOF}, e);
    }
    { return new Statement(line, statement); }
}

/**
 * Parse an expression.
 *
 * <pre>
 *   expression ::= nestConExpression
 *                  | nestDecAnonym
 *                  | DOLLAR
 *                  | term
 *                  | THIS
 *                  | [LCURLY] expression [RCURLY]
 * </pre>
 *
 * @return an AST for an expression.
 */
private Expression expression(): {
    int line = 0;
    Expression expression = null;
    Expression expression2 = null;
    Operator operator = null;
}
{
    try {
          expression = nestConExpression() { line = expression.line(); }
        | expression = nestDecAnonym() { line = expression.line(); }
        | <DOLLAR>
          { line = token.beginLine;
            expression = new AnonymExpression(line); }
        | expression = term()
        | <THIS>
          { line = token.beginLine;
            expression = new ThisExpression(line); }
        | LOOKAHEAD( <LCURLY> expression() <RCURLY> )
          <LCURLY>
          expression = expression()
          <RCURLY>
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{EOF}, e);
    }
    { return expression; }
}

/**
 * Parse a parenthesized expression.
 *
 * <pre>
 *   parExpression ::= LPAREN expression RPAREN
 * </pre>
 *
 * @return an AST for a parExpression.
 */

private Expression parExpression(): {
    Expression expr = null;
}
{
    try {
        <LPAREN> expr = expression() <RPAREN>
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return expr; }
}

/**
 * Parse an inStatement, that is a/multiple statement/s included in a block.
 *
 * <pre>
 *   inStatement ::= LCURLY {declarationPart} {statement} RCURLY
 *                    | LCURLY {declarationPart} expression RCURLY
 * </pre>
 *
 * @return an AST for an inStatement.
 */
private InStatement inStatement(): {
    int line = 0;
    DeclarationPart aDecl = null;
    ArrayList<DeclarationPart> decls = new ArrayList<DeclarationPart>();
    Statement aStatement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    Expression expression = null;
}
{
    try {
        <LCURLY> { line = token.beginLine; }
        (
          aDecl = declarationPart() { decls.add(aDecl); }
        )*
        (
          expression = expression()
          |
          (
            aStatement = statement() { statements.add(aStatement); }
          )*
        )
        <RCURLY>
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new InStatement(line, decls, statements, expression); }
}

/**
 * Parse an inExpression, that is an expression included in a block.
 *
 * <pre>
 *   inExpression ::= LCURLY {declarationPart} [statement] expression RCURLY
 *                    | LCURLY {declarationPart} statement RCURLY
 * </pre>
 *
 * @return an AST for an inExpression.
 */
private InExpression inExpression(): {
    int line = 0;
    DeclarationPart aDecl = null;
    ArrayList<DeclarationPart> decls = new ArrayList<DeclarationPart>();
    Statement statement = null;
    Expression expression = null;
}
{
    try {
        <LCURLY> { line = token.beginLine; }
        (
          aDecl = declarationPart() { decls.add(aDecl); }
        )*
        statement = statement()
        [
          expression = expression()
        ]
        <RCURLY>
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new InExpression(line, decls, statement, expression); }
}

/**
 * Parse a nestable construct (statement).
 *
 * <pre>
 *   nestConStatement ::= assignmentExpression
 *                    | variable LPAREN {expression {COMMA expression}} RPAREN
 *                    | {LCURLY}+ expression {expression} {RCURLY}+ //TODO create curledExpression instead
 *                    | LPAREN inStatement RPAREN
 *                    | IF parExpression inStatement
 *                      {ELSE IF LPAREN expression RPAREN inStatement}
 *                      [ELSE inStatement]
 *                    | MATCH expression LCURLY
 *                      {CASE caseStatementClause}+
 *                      [ELSE inStatement]
 *                      RCURLY
 *                    | FOR LPAREN {loopDec}+ RPAREN inStatement
 *                    | TRY inStatement
 *                      [CATCH LCURLY
 *                      {CASE caseStatementClause}+
 *                      RCURLY]
 *                      [FINALLY inStatement]
 *                    | RAISE inExpression
 *                    | THREAD inStatement
 *                    | LOCK [LPAREN expression RPAREN] inStatement
 * </pre>
 *
 * @return an AST for a nestConStatement.
 */
private Statement nestConStatement(): {
    int line = 0;
    Statement out = null;
    String name = null;
    Statement statement = null;
    Statement statement2 = null;
    Expression expression = null;
    Expression expression2 = null;
    ArrayList<Expression> args = new ArrayList<Expression>(); //TODO move to a map instead
    ArrayList<Expression> conds = new ArrayList<Expression>();
    ArrayList<InStatement> consq = new ArrayList<InStatement>();
    CaseStatementClause aClause = null;
    ArrayList<CaseStatementClause> clauses = new ArrayList<CaseStatementClause>();
    LoopDeclaration loopDec = null;
    ArrayList<LoopDec> loopDecs = new ArrayList<LoopDec>();
}
{
    try {
        expression = assignmentExpression() { line = expression.line();
         out = expression; }
         | <VARIABLE> { line = token.beginLine; name = token.image; }
          <LPAREN> expression2 = expression() { args.add(expression2); }
          (
            <COMMA> expression2 = expression() { args.add(expression2); }
          )* <RPAREN>
          { out = new Call(line, name, args, "procedure"); }
        | <LPAREN> { line = token.beginLine; } statement = inStatement() <RPAREN>
          { out = statement; }
        | <IF> { line = token.beginLine; }
          expression = parExpression() statement = inStatement()
          { conds.add(expression); consq.add(statement); }
          (
            <ELSE> <IF> expression = parExpression() statement = inStatement()
            { conds.add(expression); consq.add(statement); }
          )*
          [
            <ELSE> statement = inStatement()
            { consq.add(statement); }
          ]
          { out = new ConditionalStruct(line, conds, consq); }
        | <MATCH> { line = token.beginLine; }
          expression = expression() <LCURLY>
          (
            <CASE> aClause = caseStatementClause() { clauses.add(aClause); }
          )+
          <ELSE> statement = inStatement() <RCURLY>
          { out = new CaseStructure(line, expression, clauses, statement); }
        | <FOR> { line = token.beginLine; }
          <LPAREN>
          (
            loopDec = loopDeclaration()
            { loopDecs.add(loopDec); }
          )*
          <RPAREN> statement = inStatement()
          { out = new LoopStructure(line, loopDecs, statement); }
        | <TRY> { line = token.beginLine; }
          statement = inStatement()
          [
            <CATCH> <LCURLY>
            (
              <CASE> aClause = caseStatementClause() { clauses.add(aClause); }
            )+ <RCURLY>
          ]
          [
            <FINALLY> statement2 = inStatement()
          ]
          { out = new TryStructure(line, statement, clauses, statement2); }
        | <RAISE> { line = token.beginLine; }
          expression = inExpression()
          { out = new RaiseStructure(line, expression); }
        | <THREAD> { line = token.beginLine; }
          statement = inStatement()
          { out = new ThreadStructure(line, statement); }
        | <LOCK> { line = token.beginLine; }
          [
            <LPAREN> expression = expression() <RPAREN>
          ]
          statement = inStatement()
          { out = new LockStructure(line, expression, statement); }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a nestable construct (expression).
 *
 * <pre>
 *   nestConExpression ::= variable LPAREN {expresseion {COMMA expression}} RPAREN
 *                    | LPAREN expression RPAREN
 *                    | IF LPAREN expression RPAREN inExpression
 *                      {ELSE IF LPAREN expression RPAREN inExpression}
 *                      [ELSE inExpression]
 *                    | MATCH expression LCURLY
 *                      {CASE caseExpressionClause}+
 *                      [ELSE inExpression]
 *                      RCURLY
 *                    | FOR LPAREN {loopDec}+ RPAREN inExpression
 *                    | TRY inExpression
 *                      [CATCH LCURLY
 *                      {CASE caseExpressionClause}+
 *                      RCURLY]
 *                      [FINALLY inStatement]
 *                    | RAISE inExpression
 *                    | THREAD inExpression
 *                    | LOCK [LPAREN expression RPAREN] inExpression
 * </pre>
 *
 * @return an AST for a nestConExpression.
 */
private Expression nestConExpression(): {
    int line = 0;
    Expression out = null;
    Variable name = null;
    Statement statement = null;
    Expression expression = null;
    Expression expression2 = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
    ArrayList<Expression> conds = new ArrayList<Expression>();
    ArrayList<InStatement> consq = new ArrayList<InStatement>();
    CaseStatementClause aClause = null;
    ArrayList<CaseStatementClause> clauses = new ArrayList<CaseStatementClause>();
    LoopDeclaration loopDec = null;
    ArrayList<LoopDeclaration> loopDecs = new ArrayList<LoopDeclaration>();
}
{
    try {
        <VARIABLE> { line = token.beginLine; name = token.image; }
          <LPAREN> expression = expression() { args.add(expression); }
          (
            <COMMA> expression = expression() { args.add(expression); }
          )* <RPAREN>
          { out = new Call(line, name, args, "function"); }
        | <LPAREN> { line = token.beginLine; } expression = expression() <RPAREN>
          { out = expression; }
        | <IF> { line = token.beginLine; }
          <LPAREN> expression = expression() <RPAREN> expression2 = inExpression()
          { conds.add(expression); consq.add(expression2); }
          (
            <ELSE> <IF> <LPAREN> expression = expression() <RPAREN> expression2 = inExpression()
            { conds.add(expression); consq.add(expression2); }
          )*
          [
            <ELSE> expression = inExpression()
            { consq.add(expression); }
          ]
          { out = new ConditionalStruct(line, conds, consq); }
        | <MATCH> { line = token.beginLine; }
          expression = expression() <LCURLY>
          (
            <CASE> aClause = caseExpressionClause() { clauses.add(aClause); }
          )+
          <ELSE> expression2 = inExpression() <RCURLY>
          { out = new CaseStructure(line, expression, clauses, expression2); }
        | <FOR> { line = token.beginLine; }
          <LPAREN>
          (
            loopDec = loopDeclaration()
            { loopDecs.add(loopDec); }
          )*
          <RPAREN> expression = inExpression()
          { out = new LoopStructure(line, loopDecs, expression); }
        | <TRY> { line = token.beginLine; }
          expression = inExpression()
          [
            <CATCH> <LCURLY>
            (
              <CASE> aClause = caseExpressionClause() { clauses.add(aClause); }
            )+ <RCURLY>
          ]
          [
            <FINALLY> statement = inStatement()
          ]
          { out = new TryStructure(line, expression, clauses, statement); }
        | <RAISE> { line = token.beginLine; }
          expression = inExpression()
          { out = new RaiseStructure(line, expression); }
        | <THREAD> { line = token.beginLine; }
          expression = inExpression()
          { out = new ThreadStructure(line, expression); }
        | <LOCK> { line = token.beginLine; }
          [
            <LPAREN> expression = expression() <RPAREN>
          ]
          expression2 = inExpression()
          { out = new LockStructure(line, expression, expression2); }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a nestable declaration (variables).
 *
 * <pre>
 *   nestDecVariable ::= DEFPROC variable LPAREN {pattern {COMMA pattern}} RPAREN inStatement
 *                 | DEF [LAZY] variable LPAREN {pattern {COMMA pattern}} RPAREN inExpression
 *                 | FUNCTOR [variable] {
 *                     (IMPORT importClause {COMMA importClause}+)
 *                     | (EXPORT exportClause {COMMA exportClause}+)
 *                   }
 *                   inStatement
 *                 | CLASS variableStrict [classDescriptor] LCURLY
 *                   {classElementDef} RCURLY
 * </pre>
 *
 * @return an AST for a nestDecVariable.
 */
private Statement nestDecVariable(): {
    int line = 0;
    int line2 = 0;
    Statement out = null;
    Statement statement = null;
    Expression expression = null;
    String name = null;
    boolean lazy = false;
    Pattern aPattern = null;
    ArrayList<Pattern> args = new ArrayList<Pattern>();
    ImportClause importClause = null;
    ArrayList<ImportClause> imports = new ArrayList<ImportClause>();
    ExportClause exportClause = null;
    ArrayList<ExportClause> exports = new ArrayList<ExportClause>();
    ClassDescriptor aDescriptor = null;
    ArrayList<ClassDescriptor> descriptors = new ArrayList<ClassDescriptor>();
    ClassElement classElement = null;
    ArrayList<Method> methods = new ArrayList<Method>();
}
{
    try {
        <DEFPROC> { line = token.beginLine; }
          <VARIABLE> { name = token.image; }
          <LPAREN>
          aPattern = pattern() { args.add(aPattern); }
          (
            <COMMA> aPattern = pattern() { args.add(aPattern); }
          )*
          <RPAREN>
          statement = inStatement()
          { out = new ProcedureDef(line, name, args, statement); }
        | <DEF> { line = token.beginLine; }
          [<LAZY> { lazy = true; }]
          <VARIABLE> { name = token.image; }
          <LPAREN>
          aPattern = pattern() { args.add(aPattern); }
          (
            <COMMA> aPattern = pattern() { args.add(aPattern); }
          )*
          <RPAREN>
          expression = inExpression()
          { out = new FunctionDef(line, name, args, expression, lazy); }
        | <FUNCTOR> { line = token.beginLine; }
          [ <VARIABLE> { name = token.image; } ]
          (
            ( <IMPORT> importClause = importClause() { importClauses.add(importClause); }
              (
                <COMMA> importClause = importClause() { importClauses.add(importClause); }
              )*
            )
            |
            ( <EXPORT> exportClause = exportClause() { exportClauses.add(exportClause); }
              (
                <COMMA> exportClause = exportClause() { exportClauses.add(exportClause); }
              )*
            )
          )*
          statement = inStatement()
          { out = new Functor(line, name, imports, exports, statement); }
        | <CLASS> { line = token.beginLine; }
          <VARIABLESTRICT> { name = token.image; }
          [
            aDescriptor = classDescriptor() { descriptors.add(aDescriptor); }
          ] <LCURLY>
          (
            classElement = classElementDef()
            { if(classElement instanceof Method){
                methods.add(classElement);
              } else {
                descriptors.add(classElement);
              }
            }
          )* <RCURLY>
          { out = new ClassDeclaration(line, name, descriptors, methods); }
    }
    catch ( ParseException e ) {
       recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a nestable declaration (anonymous).
 *
 * <pre>
 *   nestDecAnonym ::= DEFPROC DOLLAR LPAREN {pattern {COMMA pattern}} RPAREN inStatement
 *                 | DEF [LAZY] DOLLAR LPAREN {pattern {COMMA pattern}} RPAREN inExpression
 *                 | FUNCTOR [DOLLAR] {
 *                     (IMPORT importClause {COMMA importClause}+)
 *                     | (EXPORT exportClause {COMMA exportClause}+)
 *                   }
 *                   inStatement
 *                 | CLASS DOLLAR [classDescriptor] LCURLY
 *                   {classElementDef} RCURLY
 * </pre>
 *
 * @return an AST for a nestDecAnonym.
 */
private Statement nestDecAnonym(): {
    int line = 0;
    int line2 = 0;
    Statement out = null;
    Statement statement = null;
    Expression expression = null;
    Variable name = null;
    boolean lazy = false;
    Pattern aPattern = null;
    ArrayList<Pattern> args = new ArrayList<Pattern>();
    ImportClause importClause = null;
    ArrayList<ImportClause> imports = new ArrayList<ImportClause>();
    ExportClause exportClause = null;
    ArrayList<ExportClause> exports = new ArrayList<ExportClause>();
    ClassDescriptor aDescriptor = null;
    ArrayList<ClassDescriptor> descriptors = new ArrayList<ClassDescriptor>();
    ClassElement classElement = null;
    ArrayList<Method> methods = new ArrayList<Method>();
}
{
    try {
        <DEFPROC> { line = token.beginLine; }
          <DOLLAR> <LPAREN>
          aPattern = pattern() { args.add(aPattern); }
          (
            <COMMA> aPattern = pattern() { args.add(aPattern); }
          )* <RPAREN>
          statement = inStatement()
          { out = new ProcedureDef(line, null, args, statement); }
        | <DEF> { line = token.beginLine; }
          [<LAZY> { lazy = true; }]
          <DOLLAR> <LPAREN>
          aPattern = pattern() { args.add(aPattern); }
          (
            <COMMA> aPattern = pattern() { args.add(aPattern); }
          )* <RPAREN>
          expression = inExpression()
          { out = new FunctionDef(
          line, null, args, expression, lazy); }
        | <FUNCTOR> { line = token.beginLine; }
          [ <DOLLAR> ]
          (
            ( <IMPORT> importClause = importClause() { importClauses.add(importClause); }
              (
                <COMMA> importClause = importClause() { importClauses.add(importClause); }
              )*
            )
            |
            ( <EXPORT> exportClause = exportClause() { exportClauses.add(exportClause); }
              (
                <COMMA> exportClause = exportClause() { exportClauses.add(exportClause); }
              )*
            )
          )*
          statement = inStatement()
          { out = new Functor(line, name, imports, exports, statement); }
        | <CLASS> { line = token.beginLine; }
          <DOLLAR>
          [
            aDescriptor = classDescriptor() { descriptors.add(aDescriptor); }
          ] <LCURLY>
          (
            classElement = classElementDef()
            { if(classElement instanceof Method){
                methods.add(classElement);
              } else {
                descriptors.add(classElement);
              }
            }
          )* <RCURLY>
          { out = new ClassDeclaration(line, name, descriptors, methods); }
    }
    catch ( ParseException e ) {
       recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse an import clause of a functor. There can be multiple of them in an import statement,
 * separated by commas.
 *
 * <pre>
 *   importClause ::= variable
 *                    [LPAREN (atom|int)[COLON variable] {COMMA (atom|int)[COLON variable]} RPAREN]
 *                    [FROM atom]
 * </pre>

 * @return an AST for an ImportClause.
 */
 private ImportClause importClause(): {
    int line = 0;
    String name = null;
    String label = null;
    Variable var = null;
    Map<String, Variable> map = new HashMap<String, Variable>();
    String source = null;
}
{
    try {
        <VARIABLE> { line = token.beginLine; name = token.image; }
        [
          <LPAREN> (<ATOM>|<INT>) { label = token.image; }
            [<COLON> <VARIABLE> { var = new Variable(token.beginLine, token.image); }]
            { map.put(label, var); } //var will be null most of the time
          (
            <COMMA> (<ATOM>|<INT>) { label = token.image; var = null; } //reset the previous values !
            [<COLON> <VARIABLE> { var = new Variable(token.beginLine, token.image); }]
            { map.put(label, var); } //var will be null most of the time
          )*
        ]
        [
          <FROM> <ATOM> { source = token.image; }
        ]
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new ImportClause(line, name, map, source); }
}

/**
 * Parse an export clause of a functor. There can be multiple of them in an export statement,
 * separated by commas.
 *
 * <pre>
 *   exportClause ::= [(atom|int) COLON] variable
 * </pre>

 * @return an AST for an ExportClause.
 */
 private ExportClause exportClause(): {
    int line = 0;
    String label = null;
    Variable var = null;
}
{
    try {
        [
          (<ATOM>|<INT>) { line = token.beginLine; label = token.image; }
        ]
        <VARIABLE>
        { line = (line!=0 ? line : token.beginLine);
          var = new Variable(token.beginLine, token.image); }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new ExportClause(line, label, var); }
}

/**
 * Parse a class element definition. It can return a Method or
 * a class descriptor (extension, attribute, or property)
 *
 * <pre>
 *   classElementDef ::= DEF methHead [ASSIGN variable] (inExpression|inStatement)
 *                      | classDescriptor
 * </pre>

 * @return an AST for a ClassElement.
 */
 private ClassElement classElementDef(): {
    int line = 0;
    MethodHead aMethodHead = null;
    Variable name = null;
    Expression expression = null;
    Statement statement = null;
    Method method = null;
    ClassDescriptor descriptor = null;
}
{
    try {
        <DEF> { line = token.beginLine; }
          aMethodHead = methHead()
          [<ASSIGN> <VARIABLE> { name = new Variable(line, token.image); }]
          (
            expression = inExpression() |
            statement = inStatement()
          )
          { out = new Method(line, aMethodHead, name, expression, statement); }
        | descriptor = classDescriptor()
          { out= descriptor; }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a case/match statement clause.
 *
 * <pre>
 *   caseStatementClause ::= pattern {(LAND|LOR) conditionalExpression} IMPL inStatement
 * </pre>

 * @return an AST for a caseStatementClause.
 */
private CaseStatementClause caseStatementClause(): {
    int line = 0;
    Statement statement = null;
    Pattern pattern = null;
    Operator op = null;
    ArrayList<LogicOp> ops = new ArrayList<LogicOp>();
    Expression expression = null;
    ArrayList<Expression> exprs = new ArrayList<Expression>();
}
{
    try {
        pattern = pattern() { line = pattern.line(); }
        (
          (<LAND> { op = new Operator(token.beginLine, Operator.AND); }
          | <LOR> { op = new Operator(token.beginLine, Operator.OR); })
          expression = conditionalExpression()
          { ops.add(logicOp); exprs.add(expression); }
        )*
        <IMPL> statement = inStatement()
        { out = new CaseStatementClause(line, pattern, ops, exprs, statement); }
    }
    catch ( ParseException e ) {
       recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a case/match expression clause.
 *
 * <pre>
 *   caseExpressionClause ::= pattern {(LAND|LOR) conditionalExpression} IMPL inExpression
 * </pre>

 * @return an AST for a caseExpressionClause.
 */
private CaseExpressionClause caseExpressionClause(): {
    int line = 0;
    Statement expression = null;
    Pattern pattern = null;
    Operator op = null;
    ArrayList<LogicOp> ops = new ArrayList<LogicOp>();
    Expression aExpression = null;
    ArrayList<Expression> exprs = new ArrayList<Expression>();
}
{
    try {
        pattern = pattern() { line = pattern.line(); }
        (
          (<LAND> { op = new Operator(token.beginLine, Operator.AND); }
          | <LOR> { op = new Operator(token.beginLine, Operator.OR); })
          aExpression = expression()
          { ops.add(logicOp); exprs.add(aExpression); }
        )*
        <IMPL> expression = inExpression()
        { out = new CaseExpressionClause(line, pattern, ops, exprs, expression); }
    }
    catch ( ParseException e ) {
       recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse an assignment expression.
 *
 * <pre>
 *   assignmentExpression ::= assignmentExpression
 *                              [(ASSIGN|PLUSASSIGN|MINUSASSIGN|DEFINE) assignmentExpression]
 * </pre>
 *
 * @return an AST for an AssignmentExpression.
 */
private Expression assignmentExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = conditionalExpression() { line = token.beginLine; }
        [
            (<ASSIGN> rhs = assignmentExpression()
                { lhs = new OperationAssignment(line, lhs, rhs); }
             | <PLUSASSIGN>  rhs = assignmentExpression()
                { lhs = new OperationPlusAssignment(line, lhs, rhs); }
             | <MINUSASSIGN> rhs = assignmentExpression()
                { lhs = new OperationMinusAssignment(line, lhs, rhs); }
             | <DEFINE> rhs = assignmentExpression()
                { lhs = new OperationsAssignmentDefine(line, lhs, rhs); }
            )
        ]
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse a conditional expression.
 *
 * <pre>
 *   conditionalExpression ::= conditionalOrExpression
 * </pre>
 *
 * @return an AST for a conditionalExpression.
 */
private Expression conditionalExpression(): {
    int line = 0;
    Expression lhs = null;
}
{
    try {
        lhs = conditionalOrExpression() //{ line = token.beginLine; }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse a conditional OR expression.
 *
 * <pre>
 *   conditionalOrExpression ::= conditionalAndExpression {LOR conditionalAndExpression}
 * </pre>
 *
 * @return an AST for a conditionalOrExpression.
 */
private Expression conditionalOrExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = conditionalAndExpression() { line = token.beginLine; }
        (
            <LOR> rhs = conditionalAndExpression()
            { lhs = new OperationLogicalOr(line, lhs, rhs); }
        )*
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse a conditional AND expression.
 *
 * <pre>
 *   conditionalAndExpression ::= equalityExpression {LAND equalityExpression}
 * </pre>
 *
 * @return an AST for a conditionalAndExpression.
 */
private Expression conditionalAndExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = equalityExpression() { line = token.beginLine; }
        (
            <LAND> rhs = equalityExpression()
            { lhs = new OperationLogicalAnd(line, lhs, rhs); }
        )*
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse an equality expression.
 *
 * <pre>
 *   equalityExpression ::= relationalExpression {EQUAL relationalExpression}
 * </pre>
 *
 * @return an AST for an equalityExpression.
 */
private Expression equalityExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = relationalExpression() { line = token.beginLine; }
        (
            <EQUAL> rhs = relationalExpression()
            { lhs = new OperationLogicalEqual(line, lhs, rhs); }
        )*
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse a relational expression.
 *
 * <pre>
 *   relationalExpression ::= additiveExpression {(GT|GE|LT|LE) additiveExpression}
 * </pre>
 *
 * @return an AST for a relationalExpression.
 */
private Expression relationalExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = additiveExpression() { line = token.beginLine; }
        [
            <GT> rhs = additiveExpression() { lhs = new OperationLogicalGreaterThan(line, lhs, rhs); }
            | <GE> rhs = additiveExpression() { lhs = new OperationLogicalGreaterEqual(line, lhs, rhs); }
            | <LT> rhs = additiveExpression() { lhs = new OperationLogicalLessThan(line, lhs, rhs); }
            | <LE> rhs = additiveExpression() { lhs = new OperationLogicalLessEqual(line, lhs, rhs); }
        ]
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse an additive expression.
 *
 * <pre>
 *   additiveExpression ::= multiplicativeExpression {(PLUS|MINUS) multiplicativeExpression}
 * </pre>
 *
 * @return an AST for an additiveExpression.
 */
private Expression additiveExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = multiplicativeExpression() { line = token.beginLine; }
        (
            <PLUS> rhs = multiplicativeExpression()
                { lhs = new OperationPlus(line, lhs, rhs); }
            | <MINUS> rhs = multiplicativeExpression()
                { lhs = new OperationMinus(line, lhs, rhs); }
        )*
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse a multiplicative expression.
 *
 * <pre>
 *   multiplicativeExpression ::= unaryExpression {(STAR|SLASH|MODULO) unaryExpression}
 * </pre>
 *
 * @return an AST for a multiplicativeExpression.
 */
private Expression multiplicativeExpression(): {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
}
{
    try {
        lhs = unaryExpression() { line = token.beginLine; }
        (
            <STAR> rhs = unaryExpression()
                { lhs = new OperationMultiplication(line, lhs, rhs); }
            | <SLASH> rhs = unaryExpression()
                { lhs = new OperationDivision(line, lhs, rhs); }
            | <MODULO> rhs = unaryExpression()
                { lhs = new OperationModulo(line, lhs, rhs); }
        )*
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return lhs; }
}

/**
 * Parse an unary expression.
 *
 * <pre>
 *   unaryExpression ::= (INC|DEC|MINUS|PLUS) unaryExpression
 *                          | simpleUnaryExpression
 * </pre>
 *
 * @return an AST for an unaryExpression.
 */
private Expression unaryExpression(): {
    int line = 0;
    Expression expr = null;
    Expression expr2 = null;
}
{
    try {
        <INC> { line = token.beginLine; }
        expr2 = unaryExpression()
        { expr = new OperationPreIncr(line, expr2); }
        | <DEC> { line = token.beginLine; }
            expr2 = unaryExpression()
            { expr = new OperationPreDecr(line, expr2); }
        | <PLUS> { line = token.beginLine; }
            expr2 = unaryExpression()
            { expr = new OperationValidate(line, expr2); }
        | <MINUS> { line = token.beginLine; }
            expr2 = unaryExpression()
            { expr = new OperationNegate(line, expr2); }
        | expr = simpleUnaryExpression()
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return expr; }
}

/**
 * Parse a simple unary expression.
 *
 * <pre>
 *   simpleUnaryExpression ::= LNOT unaryExpression
 *                          | postfixExpression
 * </pre>
 *
 * @return an AST for a simpleUnaryExpression.
 */
private Expression simpleUnaryExpression(): {
    int line = 0;
    Expression expr = null;
    Expression expr2 = null;
}
{
    try {
        <LNOT> { line = token.beginLine; }
        expr2 = unaryExpression()
        { expr = new OperatorLogicalNot(line, expr2); }
        | expr = postfixExpression()
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return expr; }
}

/**
 * Parse a postfix expression.
 *
 * <pre>
 *   postfixExpression ::= primary {(DEC|INC)}
 * </pre>
 *
 * @return an AST for a postfixExpression.
 */

private Expression postfixExpression(): {
    int line = 0;
    Expression primaryExpr = null;
}
{
    try {
        primaryExpr = primary() { line = primaryExpr.line(); }
        (
            <DEC> { primaryExpr = new OperationPostDecr(line, primaryExpr); }
            | <INC> { primaryExpr = new OperationPostInc(line, primaryExpr); }
        )*
    }
    catch ( ParseException e ) {
        recoverFromError( new int[]{RCURLY}, e );
    }
    { return primaryExpr; }
}

/**
 * Parse a primary expression.
 *
 * <pre>
 *   primary ::= parExpression
 *             | THIS DOT variable [LPAREN {expression {COMMA expression}} RPAREN]
 *             | SUPER LPAREN variableStrict RPAREN
 *                      DOT variable [LPAREN {expression {COMMA expression}} RPAREN]
 *             | literal
 *             | qualifiedIdentifier
 *             | initializer
 * </pre>
 *
 * @return an AST for a primaryExpression.
 */
private Expression primary(): {
    int line = 0;
    Expr out = null;
    Expression expr = null;
    Variable variable = null;
    String name = null;
    Expression arg = null;
    ArayList<Expression> args = new ArrayList<Expression>();
}
{
    try {
        expr = parExpression()
        | <THIS> { line = token.beginLine; }
            <DOT> <VARIABLE> { variable = new Variable(line, token.image);
            out = new ExpressionThisAttribute(line, variable); } //TODO actually, attributes are private in Oz
            [
                <LPAREN>
                (
                    arg = expression() { args.add(arg); }
                    (
                        <COMMA> arg = expression() { args.add(arg); }
                    )*
                )*
                <RPAREN>
                { out = new ExpressionThisMethod(line, variable, args); }
            ]
        | <SUPER> { line = token.beginLine; }
            <LPAREN> <VARIABLESTRICT> { name = token.image; } <RPAREN>
            <DOT> <VARIABLE> { variable = new Variable(token.beginLine, token.image);
            out = new ExpressionSuperAttribute(line, name, variable); } //TODO actually, attributes are private in Oz
            [
                <LPAREN>
                (
                    arg = expression() { args.add(arg); }
                    (
                        <COMMA> arg = expression() { args.add(arg); }
                    )*
                )*
                <RPAREN>
                { out = new ExpressionSuperMethod(line, variable, args); }
            ]
        | out = literal()
        | out = qualifiedIdentifier()
        | out = initializer()
    }
    catch ( ParseException e ) {
        recoverFromError( new int[]{RCURLY}, e );
    }
    { return out; }
}

/**
 * Parse a qualified identifier.
 *
 * <pre>
 *   qualifiedIdentifier ::= variable {DOT variable [LPAREN {expression {COMMA expression}} RPAREN]}
 * </pre>
 *
 * @return an AST for a qualifiedIdentifier.
 */
private Expression qualifiedIdentifier(): {
    int line = 0;
    Expression out = null;
    Variable var = null;
    Variable var = null;
    Expression arg = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
}
{
    try {
        <VARIABLE> { line = token.beginLine; var = new Variable(line, token.image); out = var; }
        (
            <DOT> <VARIABLE>
            { var2 = new Variable(token.beginLine, token.image);
            out = new ExpressionSelectionAttribute(line, var, var2); } //TODO actually, attributes are private in Oz
            [
                <LPAREN>
                (
                    arg = expression() { args.add(arg); }
                    (
                        <COMMA> arg = expression() { args.add(arg); }
                    )*
                )*
                <RPAREN>
                { out = new ExpressionSelectionMethod(line, var, var2, args); }
            ]
        )*
    }
    catch ( ParseException e ) {
        recoverFromError( new int[]{RCURLY}, e );
    }
    { return out; }
}

/**
 * Parse an initializer, which creates a tuple or a list.
 *
 * <pre>
 *   initializer ::= expression {HASHTAG expression}
 *                  | LBRACK {expression {COLCOL expression}} RBRACK
 *                  | expression {COLCOL expression} [NIL] //If ends with nil -> list of values. Else -> concat 2 lists
 * </pre>
 *
 * @return an AST for an initializer.
 */
private Expression initializer(): {
    int line = 0;
    Expression out = null;
    Expression element = null;
    ArrayList<Expression> elements = new ArrayList<Expression>();
}
{
    try {
        LOOKAHEAD( expression() <HASHTAG> expression() )
        element = expression()
        { line = element.line(); elements.add(element); }
        (
            <HASHTAG> element = expression()
            { elements.add(element); }
        )*
        { out = new ExpressionTupleInit(line, elements); }
        |
        <LBRACK> { line = token.beginLine; }
            (
                element = expression()
                { elements.add(element); }
                (
                    <COLCOL> element = expression()
                    { elements.add(element); }
                )*
            )*
        <RBRACK>
        { out = new ExpressionListInit(line, elements); }
        |
        LOOKAHEAD( expression() <COLCOL> expression() )
        element = expression() { line = token.beginLine; elements.add(element); }
        (
            <COLCOL> { line = token.beginLine; }
            element = expression() { elements.add(element); }
        )*
        { out = new ExpressionListInit(line, elements, true); }
        [
            <NIL> { out = new ExpressionListInit(line, elements, false); }
        ]
    }
    catch ( ParseException e ) {
        recoverFromError( new int[]{RCURLY}, e );
    }
    { return out; }
}

/**
 * Parse a literal.
 *
 * <pre>
 *   literal ::= UNIT | TRUE | FALSE | UNDERSCORE | NIL | int | float | string | character
 * </pre>
 *
 * @return an AST for a literal.
 */
private Expression literal(): {
    int line = 0;
    Expr out = null;
}
{
    try {
        <UNIT> { out = new Literal(token.beginLine, Literal.UNIT); }
        | <TRUE> { out = new Literal(token.beginLine, Literal.BOOLEAN, true); }
        | <FALSE> { out = new Literal(token.beginLine, Literal.BOOLEAN, false); }
        | <UNDERSCORE> { out = new Literal(token.beginLine, Literal.UNDERSCORE); }
        | <NIL> { out = new Literal(token.beginLine, Literal.NIL); }
        | <INT> { out = new Literal(token.beginLine, Literal.INT, token.image); }
        | <FLOAT> { out = new Literal(token.beginLine, Literal.FLOAT, token.image); }
        | <STRING> { out = new Literal(token.beginLine, Literal.STRING, token.image); }
        | <CHARACTER> { out = new Literal(token.beginLine, Literal.CHAR, token.image); }
    }
    catch ( ParseException e ) {
        recoverFromError( new int[]{RCURLY}, e );
    }
    { return out; }
}

/**
 * Parse a term.
 *
 * <pre>
 *   term ::= atom
 *            | atomLisp LPAREN [[feature COLON]expression {COMMA [feature COLON]expression}] RPAREN
 * </pre>

 * @return an AST for a term.
 */
private Term term(): {
    int line = 0;
    int lostLabelsCounter = 1;
    Expression out = null;
    boolean bool = true;
    String value = null;
    Feature aFeature = null;
    Expression val = null;
    Map<Feature, Expression> map = new HashMap<Feature, Expression>();
    ArrayList<Expression> args = new ArrayList<Expression>();
}
{
    try {
        <ATOM> {out = new Term(token.beginLine, Term.ATOM, token.image); }
        | <ATOMLISP> { line = token.beginLine; value = token.image; } //This is a record
          <LPAREN> [
          [ aFeature = feature() <COLON> { map.put(aFeature, null); }]
          val = expression()
          { if(aFeature==null){
              map.put(labelCounter, val);
              lostLabelsCounter++;
            } else {
              map.put(aFeature, val);
            }}
          (
            <COMMA>
            [aFeature = feature() <COLON> { map.put(aFeature, null); }]
            val = expression()
            { if(aFeature==null){
                map.put(labelCounter, val);
                lostLabelsCounter++;
              } else {
                map.put(aFeature, val);
              }}
          )* ] <RPAREN>
          { out = new Record(line, value, map); }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return statement; }
}

/**
/**
 * Parse a pattern.
 *
 * <pre>
 *   pattern ::= {LNOT} variable | int | float | character | atom | string | UNIT | TRUE | FALSE | UNDERSCORE | NIL
 *            | atomLisp LPAREN [[feature COLON]pattern {COMMA [feature COLON]pattern} [COMMA ELLIPSIS]] RPAREN
 *            | LPAREN pattern {(HASHTAG|COLCOL) pattern} RPAREN
 *            | LBRACK [pattern {COMMA pattern}] RBRACK
 *            | LPAREN pattern RPAREN
 * </pre>

 * @return an AST for a term.
 */
private Pattern pattern(): {
    int line = 0;
    int lostLabelsCounter = 1;
    Pattern out = null;
    boolean bool = true;
    String value = null;
    Feature aFeature = null;
    Expression val = null;
    Map<Feature, Pattern> map = new HashMap<Feature, Pattern>();
    bool more = false;
    Pattern pat1 = null;
    Operator op = null;
    Pattern pat2 = null;
    ArrayList<Pattern> patterns = new ArrayList<Pattern>();
}
{
    try {
        <UNIT> { out = new Term(token.beginLine, Term.UNIT); }
        | <TRUE> { out = new Term(token.beginLine, Term.BOOLEAN, true); }
        | <FALSE> { out = new Term(token.beginLine, Term.BOOLEAN, false); }
        | <UNDERSCORE> { out = new Term(token.beginLine, Term.UNDERSCORE); }
        | <NIL> { out = new Term(token.beginLine, Term.NIL); }
        | <INT> { out = new Term(token.beginLine, Term.INT, token.image); }
        | <FLOAT> { out = new Term(token.beginLine, Term.FLOAT, token.image); }
        | <CHARACTER> { out = new Term(token.beginLine, Term.CHAR, token.image); }
        | <ATOM> {out = new Term(token.beginLine, Term.ATOM, token.image); }
        | <STRING> { out = new Term(token.beginLine, Term.STRING, token.image); }
        | (
          <LNOT> {bool = !bool; }
          )*
          <VARIABLE> { line = token.beginLine; value = token.image;
          out = new Term(line, Term.UNKNOWN, value, bool); } //TODO if bool is false, we must ensure type is BOOLEAN
        | <ATOMLISP> { line = token.beginLine; value = token.image; } //This is a pattern record
           <LPAREN> [
           [ aFeature = feature() <COLON> { map.put(aFeature, null); }]
           val = pattern()
           { if(aFeature==null){
               map.put(labelCounter, val);
               lostLabelsCounter++;
             } else {
               map.put(aFeature, val);
             }}
           (
             <COMMA>
             [aFeature = feature() <COLON> { map.put(aFeature, null); }]
             val = pattern()
             { if(aFeature==null){
                 map.put(labelCounter, val);
                 lostLabelsCounter++;
               } else {
                 map.put(aFeature, val);
               }}
           )*
           [<COMMA> <ELLIPSIS> { more = true; }]
           ] <RPAREN>
           { out = new PatternRecord(line, value, map, more); }
        | <LPAREN> { line = token.beginLine; }
          pat1 = pattern()
          (<HASHTAG> { op = new Operator(token.beginLine,  Operator.HASHTAG); }
          | <COLCOL> { op = new Operator(token.beginLine,  Operator.COLCOL); })
          pat2 = pattern() <RPAREN>
          { out = new PatternUnion(line, pat1, pat2, op); }
        | <LBRACK> { line = token.beginLine; }
          [
            pat1 = pattern() { patterns.add(pat1); }
            (
              <COMMA>
              pat1 = pattern() { patterns.add(pat1); }
            )*
          ] <RBRACK>
          { out = new PatternListInit(line, patterns); }
        | <LPAREN> { line = token.beginLine; }
          pat1 = pattern() { out = pat1; }
          <RPAREN>
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a variables declaration group.
 *
 * <pre>
 *   declarationPart ::= (VAL|VAR) (variable|pattern) ASSIGN (expression|statement) //TODO why statement ?
 *                        {COMMA (variable|pattern) ASSIGN (expression|statement)} //TODO why pattern ?
 * </pre>
 *
 * @return an AST for a declarationPart.
 */
private DeclarationPart declarationPart(): {
    int line = 0;
    boolean constant;
    DeclarationPart out = null;
    Variable variable = null;
    Expression value = null;
    Map<Variable, Expression> map = new HashMap<Variable, Expression>();
}
{
    try {
        (
          <VAL> { line = token.beginLine; constant = true; }
        | <VAR> { line = token.beginLine; constant = false; }
        )
        <VARIABLE> { variable = new Variable(line, token.image); }
        <ASSIGN> value = expression()
        { map.put(variable, value); }
        (
          <COMMA> <VARIABLE> { variable = new Variable(line, token.image); }
          <ASSIGN> value = expression()
          { map.put(variable, value); }
        )*
        { out = new DeclarationPart(line, map, constant); }
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a loop declaration.
 * A loop declaration can be an iterator or a feature declaration.
 * An iterator has the form: <it>Pat</it> in <it>Generator</it> where <it>Generator</it> describes
 * how to generate the successive values for pattern <it>Pat<it/> whose variables are local
 * to the loop.
 * If a loop comprises multiple loop declarations, the generators are stepped in parallel and
 * the loop terminates as soon as one of the generators runs out of values.
 * @source http://mozart2.org/mozart-v1/doc-1.4.0/loop/node1.html#chapter.official
 * <pre>
 *   loopDec ::= variable IN expression DOTDOT expression [SEMI expression]
 *                | variable IN expression SEMI expression [SEMI expression]
 *                | variable IN expression
 *                | BREAK COLON variable //TODO implement loop features later
 *                | CONTINUE COLON variable
 *                | RETURN COLON variable
 *                | DEFLT COLON expression
 *                | COLLECT COLON variable
 * </pre>
 *
 * @return an AST for a loop declaration.
 */
private LoopDeclaration loopDeclaration(): {
    int line = 0;
    LoopDeclaration out = null;
    Variable var = null;
    Expression generator = null;
    Expression init = null;
    Expression cond = true;
    Expression step = 1;
    Expression end = null;
    ArrayList<Feature> feats = new ArrayList<Feature>(); //TODO implement loop features later
}
{
    try {
        <VARIABLE> { line = token.beginLine; var = new Variable(line, token.image); }
          <IN> init = expression()
          <DOTDOT> end = expression()
          [
            <SEMI> step = expression()
          ]
          { out = new LoopDeclaration(line, var, init, true, step, end, feats); }
        | <VARIABLE> { line = token.beginLine; var = new Variable(line, token.image); }
          <IN> init = expression()
          <SEMI> step = expression()
          [
            <SEMI> end  = expression()
            { cond=step; step=end; }
          ]
          { out = new LoopDeclaration(line, var, init, cond, step, null, feats); }
        | <VARIABLE> { line = token.beginLine; var = new Variable(line, token.image); }
          <IN> generator = expression()
          { out = new LoopDeclaration(line, var, generator); }
    }
    catch ( ParseException e ) {
        recoverFromError( new int[]{RCURLY}, e );
    }
    { return out; }
}

/**
 * Parse a feature. For now, it is only defined as an atomLisp, but this might change in the future.
 *
 * <pre>
 *   feature ::= atomLisp
 * </pre>
 *
 * @return an AST for a feature.
 */
private Feature feature(): {
    int line = 0;
    String image = null;
}
{
    try {
        <ATOMLISP> { line = token.beginLine; image = token.image; }
    } catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new Feature(line, image); }
}

/**
 * Parse a class descriptor. This only includes a list of parent classes.
 * Attributes/properties/methods definitions are in the class body
 *
 * <pre>
 *   classDescription ::= EXTENDS variableStrict {COMMA variableStrict}+
 *                        | ATTR variable [ASSIGN expression]
 *                        | PROP variable //TODO what are properties ? Maybe it is a constant (as opposed to attributes who are cells)
 * </pre>
 *
 * @return an AST for a class descriptor.
 */
private ClassDescriptor classDescriptor(): {
    int line = 0;
    ClassDescriptor out = null;
    ArrayList<String> extensions = new ArrayList<String>();
    Variable var = null;
    Expression expr = null;
}
{
    try {
        <EXTENDS> { line = token.beginLine; }
          <VARIABLESTRICT> { extensions.add(token.image); }
          (
            <COMMA>
            <VARIABLESTRICT> { extensions.add(token.image); }
          )*
          { out = new Classdescriptor(line, "extension", extensions); }
        | <ATTR> { line = token.beginLine; }
          <VARIABLE> { var = new Variable(line, token.image); }
          [
            <ASSIGN> expr = expression()
          ]
          { out = new ClassDescriptor(line, "attribute", var, expr); }
        | <PROP> { line = token.beginLine; }
          <VARIABLE>
          { var = new Variable(line, token.image);
            out = new ClassDescriptor(line, "property", var, expr); }
    } catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return out; }
}

/**
 * Parse a method head. This can be seen as its signature
 *
 * <pre>
 *   methHead ::= (variableStrict | atomLisp ) //variableStrict => private, atomLisp => public
 *                  [LPAREN methArg {COMMA methArg} [COMMA ELLIPSIS] [DOLLAR] RPAREN]
 * </pre>
 *
 * @return an AST for a MethHead.
 */
private MethodHead methHead(): {
    int line = 0;
    MethodHead out = null;
    boolean priv = false;
    String name = null;
    MethodArg arg = null;
    ArrayList<MethodArg> args = new ArrayList<MethodArg>();
    boolean moreArgs = false;
    boolean isAFunction = false;
}
{
    try {
        (
          <VARIABLESTRICT> { line = token.beginLine; priv = true; name = token.image; }
          | <ATOMLISP> { line = token.beginLine; priv = false; name = token.image; }
        )
        [
          <LPAREN>
          arg = methArg() { args.add(arg); }
          (
            <COMMA> arg = methArg() { args.add(arg); }
          )*
          [
            <COMMA> <ELLIPSIS>
            { moreArgs = true; }
          ]
          [
            <DOLLAR> { isAFunction = true; }
          ]
          <RPAREN>
        ]
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new MethodHead(line, name, priv, args, moreArgs, isAFunction); }
}

/**
 * Parse a method argument.
 *
 * <pre>
 *   methArg ::= [feature COLON] (variable | UNDERSCORE) //TODO read http://mozart2.org/mozart-v1/doc-1.4.0/tutorial/node10.html#chapter.classes for $ explanation & default values
 *                  [LE expression]
 * </pre>
 *
 * @return an AST for a MethArg.
 */
private MethodArg methArg(): {
    int line = 0;
    Feature feature = null;
    String name = null;
    Expression defaultValue = null;
}
{
    try {
        feature = feature() { feature.line(); }
        <COLON>
        (
          <VARIABLE> { priv = true; name = token.image; }
          | <UNDERSCORE> { name = token.image; }
        )
        [
          <LE> defaultValue = expression()
        ]
    }
    catch ( ParseException e ) {
        recoverFromError(new int[]{RCURLY}, e);
    }
    { return new MethodArg(line, feature, name, defaultValue); }
}