{
  class anotherObject {}
  class point extends anotherObject
    attr x=0 attr y=0               //Attributes with (optional) default values
  {
    defproc init(a, b) {
      x=a y=b
    }
    defproc location(l) {           //Currently, only procedures are supported in classes : output must thus be given as parameter
      l = ('l(x:x, y:y))
    }
    defproc getX(o) {               //Attributes are private, making getters necessary
      o = x
    }
    defproc MoveVertical(newX) {    //Capitalized method names make them private
      x = newX
    }
    defproc MoveHorizontal(newY) {
      y = newY
    }
    defproc move(newX, newY) {
      this.moveVertical(newX)
      this.moveHorizontal(newY)
      super.do(newX, newY)          //Calling a method in the superclass
      super(anotherObject).do(newX+1, newY+1) //Specify the class of the method in case of multiple inheritance
    }
    defproc display() {
      browse("Point at ("+x+", "+y+")")
    }
  }

  val a = new(point, init(1, 1))    //Creating a new instance
  a.MoveVertical(5)                 //Error : this method is private
  a.display()
}