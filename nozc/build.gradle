plugins { // Gradle plugins to add the pre-created tasks we need
    id 'application'
    id 'java-library'
    //id 'org.beryx.runtime' version '1.12.2'
}
repositories {
    mavenCentral()
}

group 'com.barassolutions'
version = project.property("version") // Property in ./gradle.properties

application { // Allowing to create the shell script top launch the jar automagically
    mainClass = 'com.barassolutions.Nozc'
    applicationName = 'nozc'
    applicationDefaultJvmArgs = []
}

java { // Asking the build task to create other jars as well
    //withJavadocJar()
    withSourcesJar()
}

task javaccGen { // Run JavaCC to reflect changes in newoz.jj
    doFirst {
        exec {
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                workingDir = './src/main/java/com/barassolutions'
                commandLine 'cmd', '/c', '..\\..\\..\\..\\..\\..\\bin\\javacc.bat', '-static:false', 'newoz.jj'
            } else {
                workingDir = './src/main/java/com/barassolutions'
                commandLine '../../../../../../bin/javacc', '-static:false', 'newoz.jj'
            }
        }
    }
}
compileJava.dependsOn javaccGen // Run JavaCC before each compilation

processResources { // Uploading the version number to the resources folder
    outputs.upToDateWhen { false } // Run this every time (fixes a weird glitch where task stayed "UP-TO-DATE" even after changes)
    filesMatching('**/app.properties') {
        filter {
            it.replace('%APP_VERSION_TOKEN%', version)
        }
    }
}

distributions { // Add specified files to the distributions
    main {
        distributionBaseName = 'nozc'
        contents {
            from 'src/readme'
        }
    }
}

tasks.withType(JavaCompile).all { // Options for compilation tasks
    options.warnings = true
    options.deprecation = true
    options.debug = true
    options.incremental = false
    //options.compilerArgs += ['--enable-preview']
    options.release = 16
}
tasks.withType(JavaExec) { // Options for run tasks
    //jvmArgs += '--enable-preview'
}
tasks.withType(Test) { // Options for test tasks
    //jvmArgs += '--enable-preview'
}
javadoc.options { // Options for Javadoc tasks
    //addBooleanOption('-enable-preview', true)
    //addStringOption('-release', '16')
}

jar {
    manifest {
        attributes 'Main-Class': 'com.barassolutions.Nozc'
    }
}
task uberJar(type: Jar) {
    archiveClassifier = 'uber'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll {it.name.endsWith('jar')}.collect {zipTree(it)}
    }
}

dependencies { // Maven dependencies
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    // https://stefanbirkner.github.io/system-rules/index.html
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    implementation group: 'org.jetbrains', name: 'annotations', version: '20.1.0'
}
