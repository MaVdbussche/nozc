/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package com.barassolutions;

import com.barassolutions.ClassDescriptor.SubType;
import com.barassolutions.util.Logger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

/**
 * Parser generated by JavaCC. It parses a newOz program file, taking tokens from the scanner
 * (also generated by JavaCC), and produces an abstract syntax tree (AST) for it.
 */

class JavaCCParser implements JavaCCParserConstants {
    /** Whether a parser error has been found. */
    private boolean errorHasOccurred;

    /** Name of the file that is being parsed. */
    private String fileName;

    /**
     * Report a syntax error.
     *
     * @param message message identifying the error.
     * @param args related values.
     */
    private void reportParserError(String message, Object... args) {
      ArrayList<Object> arguments = new ArrayList<Object>();
      arguments.add(fileName);
      arguments.add(token.beginLine);
      arguments.addAll(Arrays.asList(args));

      errorHasOccurred = true;
      Logger.error("%s:%d: "+message, arguments.toArray());
    }

    /**
     * Recover from the parser error that occurred by skipping to
     * any of the specified tokens.
     *
     * Current error recovery mechanism is rather simple-minded and is
     * based on skipping all the tokens until a new line or an EOF is
     * encountered. This scheme can be enhanced by passing in the
     * FOLLOW-SET of the non-terminal at hand.
     *
     * @param skipTo array of tokens that we could skip to.
     * @param e exception that is raised by JavaCC in the event
     * of a parser error.
     */
    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[ i ].length; j++) {
                expected.append("\u005cn");
                expected.append("\u005ct");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\u005c"%s\u005c" found where %s sought", getToken( 1 ), expected);
        } else {
            reportParserError("\u005c"%s\u005c" found where one of %s sought", getToken(1), expected);
        }

        // Recover
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i : skipTo) {
                if (token.kind == i) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

    /**
     * Set the name of the file that is being parsed.
     *
     * @param fileName name of the file.
     */
    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Has a parser error occurred up to now?
     *
     * @return true or false.
     */
    public boolean errorHasOccurred() {
        return errorHasOccurred;
    }

/////////////////////////////////////////////////////////
//       The newOz syntactic grammar starts here         //
/////////////////////////////////////////////////////////
// Constructed from http://mozart2.org/mozart-v1/doc-1.4.0/notation/node3.html#chapter.context-free

/**
 * Parse an interactive statement and construct an AST
 * for it. After constructing the Parser, this is its entry point.
 *
 * <pre>
 *   interStatement ::= {nestConStatement}+
 *                      | DECLARE inStatement EOF
 * </pre>
 *
 * @return an AST for an interStatement.
 */
  final public InterStatement interStatement() throws ParseException {
    int line = 0;
    InStatement statement = null;
    Statement aStatement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    InterStatement out = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        jj_consume_token(DECLARE);
                    line = token.beginLine; Logger.debug("Found an interStatement");
        statement = inStatement();
        jj_consume_token(0);
          out = new InterStatement(line, statement);
        break;
      case FOR:
      case IF:
      case LOCK:
      case MATCH:
      case RAISE:
      case THREAD:
      case TRY:
      case LCURLY:
      case VARIABLE:
        label_1:
        while (true) {
          aStatement = nestConStatement();
          statements.add(aStatement); Logger.debug("Found a stand-alone statement");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
          case IF:
          case LOCK:
          case MATCH:
          case RAISE:
          case THREAD:
          case TRY:
          case LCURLY:
          case VARIABLE:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
        }
          out = new InterStatement(line, statements);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{EOF}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Statement statement() throws ParseException {
    int line = 0;
    Statement statement = null;
    Expression expression = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SKP:
        jj_consume_token(SKP);
            line = token.beginLine;
          statement = new SkipStatement(line);
        break;
      case FOR:
      case IF:
      case LOCK:
      case MATCH:
      case RAISE:
      case THREAD:
      case TRY:
      case LCURLY:
      case VARIABLE:
           Logger.debug("Found a nestConStatement");
        statement = nestConStatement();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{EOF}, e);
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final private Expression expression() throws ParseException {
    int line = 0;
    Expression expression = null;
    {Logger.debug("Entering expression()");}
    try {
      if (jj_2_1(2147483647)) {
        jj_consume_token(DOLLAR);
            line = token.beginLine;
          expression = new AnonymExpression(line);
      } else if (jj_2_2(2147483647)) {
           Logger.debug("Found an inExpression");
        expression = inExpression();
      } else if (jj_2_3(2147483647)) {
           Logger.debug("Found a nestConExpression");
        expression = nestConExpression();
      } else if (jj_2_4(2147483647)) {
           Logger.debug("Found a term");
        expression = term();
      } else if (jj_2_5(2147483647)) {
           Logger.debug("Found a nestDecAnonym()");
        expression = nestDecAnonym();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{EOF}, e);
    }
      {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parExpression() throws ParseException {
    int line = 0;
    Expression expr = null;
    {Logger.debug("Entering parExpression()");}
    try {
      jj_consume_token(LPAREN);
                   line =token.beginLine;
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new ParExpression(line, expr);}
    throw new Error("Missing return statement in function");
  }

  final private InStatement inStatement() throws ParseException {
    int line = 0;
    Declaration aDecl = null;
    ArrayList<Declaration> decls = new ArrayList<Declaration>();
    Statement aStatement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    {Logger.debug("Entering inStatement()");}
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FUNCTOR:
        case VAL:
        case VAR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
            Logger.debug("Found a declarationPart");
        aDecl = declarationPart();
                                      decls.add(aDecl);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case IF:
        case LOCK:
        case MATCH:
        case RAISE:
        case SKP:
        case THREAD:
        case TRY:
        case LCURLY:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
            Logger.debug("Found a statement");
        aStatement = statement();
                                     statements.add(aStatement);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new InStatement(line, decls, statements);}
    throw new Error("Missing return statement in function");
  }

  final private InExpression inExpression() throws ParseException {
    int line = 0;
    Declaration aDecl = null;
    ArrayList<Declaration> decls = new ArrayList<Declaration>();
    Statement statement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    Expression expression = null;
    {Logger.debug("Entering inExpression()");}
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_4:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_4;
        }
            Logger.debug("Found a declarationPart in inExpression()");
        aDecl = declarationPart();
                                      decls.add(aDecl);
      }
      label_5:
      while (true) {
        if (jj_2_7(2147483647)) {
          ;
        } else {
          break label_5;
        }
            Logger.debug("Found a statement in inExpression()");
        statement = statement();
                                    statements.add(statement);
      }
      if (jj_2_8(2147483647)) {
            Logger.debug("Found the returned expression in inExpression()");
        expression = expression();
      } else {
        ;
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new InExpression(line, decls, statements, expression);}
    throw new Error("Missing return statement in function");
  }

  final private Statement nestConStatement() throws ParseException {
    int line = 0;
    Statement out = null;
    String name = null;
    InStatement statement = null;
    InStatement statement2 = null;
    Expression expression = null;
    Expression expression2 = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
    ArrayList<Expression> conds = new ArrayList<Expression>();
    ArrayList<InStatement> consq = new ArrayList<InStatement>();
    boolean firstClausePassed = false;
    CaseStatementClause aClause = null;
    ArrayList<CaseStatementClause> clauses = new ArrayList<CaseStatementClause>();
    LoopDeclaration loopDec = null;
    ArrayList<LoopDeclaration> loopDecs = new ArrayList<LoopDeclaration>();
    {Logger.debug("Entering nestConStatement()");}
    try {
      if (jj_2_20(2147483647)) {
        jj_consume_token(VARIABLE);
                       line = token.beginLine; name = token.image;
            Logger.debug("Found a CallProcedure to "+name+" at line "+line);
        jj_consume_token(LPAREN);
        if (jj_2_10(2147483647)) {
             Logger.debug("Found an expression for parameter");
          expression2 = expression();
                                         args.add(expression2);
          label_6:
          while (true) {
            if (jj_2_9(2147483647)) {
              ;
            } else {
              break label_6;
            }
            jj_consume_token(COMMA);
            expression2 = expression();
                                                   args.add(expression2);
          }
        } else {
          ;
        }
        jj_consume_token(RPAREN);
            out = new CallProcedure(line, name, args);
      } else if (jj_2_21(2147483647)) {
        statement2 = inStatement();
            out = statement2;
      } else if (jj_2_22(2147483647)) {
        jj_consume_token(IF);
                 line = token.beginLine;
        expression = parExpression();
        statement2 = inStatement();
            conds.add(expression); consq.add(statement2);
        label_7:
        while (true) {
          if (jj_2_11(2147483647)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(ELSE);
          jj_consume_token(IF);
          expression = parExpression();
          statement2 = inStatement();
              conds.add(expression); consq.add(statement2);
        }
        if (jj_2_12(2147483647)) {
          jj_consume_token(ELSE);
          statement2 = inStatement();
              consq.add(statement2);
        } else {
          ;
        }
            out = new ConditionalStatement(line, conds, consq);
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(MATCH);
                    line = token.beginLine;
        expression = expression();
        jj_consume_token(LCURLY);
        label_8:
        while (true) {
          jj_consume_token(CASE);
          aClause = caseStatementClause(firstClausePassed);
                                                                      firstClausePassed = true; clauses.add(aClause);
          if (jj_2_13(2147483647)) {
            ;
          } else {
            break label_8;
          }
        }
        if (jj_2_14(2147483647)) {
          jj_consume_token(ELSE);
          statement2 = inStatement();
        } else {
          ;
        }
            out = new CaseStructStatement(line, expression, clauses, statement2);
        jj_consume_token(RCURLY);
      } else if (jj_2_24(2147483647)) {
        jj_consume_token(FOR);
                  line = token.beginLine;
        jj_consume_token(LPAREN);
        label_9:
        while (true) {
          loopDec = loopDeclaration();
              loopDecs.add(loopDec);
          if (jj_2_15(2147483647)) {
            ;
          } else {
            break label_9;
          }
        }
        jj_consume_token(RPAREN);
        statement2 = inStatement();
            out = new LoopStructure(line, loopDecs, statement2);
      } else if (jj_2_25(2147483647)) {
        jj_consume_token(TRY);
                  line = token.beginLine;
        statement = inStatement();
        if (jj_2_17(2147483647)) {
          jj_consume_token(CATCH);
          jj_consume_token(LCURLY);
          label_10:
          while (true) {
            jj_consume_token(CASE);
            aClause = caseStatementClause(firstClausePassed);
                                                                        firstClausePassed = true; clauses.add(aClause);
            if (jj_2_16(2147483647)) {
              ;
            } else {
              break label_10;
            }
          }
          jj_consume_token(RCURLY);
        } else {
          ;
        }
        if (jj_2_18(2147483647)) {
          jj_consume_token(FINALLY);
          statement2 = inStatement();
        } else {
          ;
        }
            out = new TryStructure(line, statement, clauses, statement2);
      } else if (jj_2_26(2147483647)) {
        jj_consume_token(RAISE);
                    line = token.beginLine;
        expression = inExpression();
            out = new RaiseStructure(line, expression);
      } else if (jj_2_27(2147483647)) {
        jj_consume_token(THREAD);
                     line = token.beginLine;
        statement2 = inStatement();
            out = new ThreadStructure(line, statement2);
      } else if (jj_2_28(2147483647)) {
        jj_consume_token(LOCK);
                   line = token.beginLine;
        if (jj_2_19(2147483647)) {
          jj_consume_token(LPAREN);
          expression = expression();
          jj_consume_token(RPAREN);
        } else {
          ;
        }
        statement2 = inStatement();
            out = new LockStructure(line, expression, statement2);
      } else if (jj_2_29(2147483647)) {
            Logger.debug("Found an assignmentStatement()");
        out = assignmentStatement();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Expression nestConExpression() throws ParseException {
    int line = 0;
    Expression out = null;
    String name = null;
    InStatement statement = null;
    Expression expression = null;
    InExpression expression2 = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
    ArrayList<Expression> conds = new ArrayList<Expression>();
    ArrayList<InExpression> consq = new ArrayList<InExpression>();
    boolean firstClausePassed = false;
    CaseExpressionClause aClause = null;
    ArrayList<CaseExpressionClause> clauses = new ArrayList<CaseExpressionClause>();
    try {
      if (jj_2_37(2147483647)) {
        jj_consume_token(IF);
                   line = token.beginLine;
            Logger.debug("Found if expression");
        expression = parExpression();
        expression2 = inExpression();
              conds.add(expression); consq.add(expression2);
        label_11:
        while (true) {
          if (jj_2_30(2147483647)) {
            ;
          } else {
            break label_11;
          }
                Logger.debug("Found else if block");
          jj_consume_token(ELSE);
          jj_consume_token(IF);
          expression = parExpression();
          expression2 = inExpression();
                conds.add(expression); consq.add(expression2);
        }
              Logger.debug("Done with elseif blocks");
        if (jj_2_31(2147483647)) {
                Logger.debug("Found else block");
          jj_consume_token(ELSE);
          expression2 = inExpression();
                consq.add(expression2);
        } else {
          ;
        }
              out = new ConditionalExpression(line, conds, consq);
      } else if (jj_2_38(2147483647)) {
        jj_consume_token(MATCH);
                      line = token.beginLine;
        expression = expression();
        jj_consume_token(LCURLY);
        label_12:
        while (true) {
          jj_consume_token(CASE);
          aClause = caseExpressionClause(firstClausePassed);
                                                                       firstClausePassed = true; clauses.add(aClause);
          if (jj_2_32(2147483647)) {
            ;
          } else {
            break label_12;
          }
        }
        if (jj_2_33(2147483647)) {
          jj_consume_token(ELSE);
          expression2 = inExpression();
        } else {
          ;
        }
            out = new CaseStructExpression(line, expression, clauses, expression2);
        jj_consume_token(RCURLY);
      } else if (jj_2_39(2147483647)) {
        jj_consume_token(TRY);
                  line = token.beginLine;
        expression = inExpression();
        if (jj_2_35(2147483647)) {
          jj_consume_token(CATCH);
          jj_consume_token(LCURLY);
          label_13:
          while (true) {
            jj_consume_token(CASE);
            aClause = caseExpressionClause(firstClausePassed);
                                                                         firstClausePassed = true; clauses.add(aClause);
            if (jj_2_34(2147483647)) {
              ;
            } else {
              break label_13;
            }
          }
          jj_consume_token(RCURLY);
        } else {
          ;
        }
        if (jj_2_36(2147483647)) {
          jj_consume_token(FINALLY);
          statement = inStatement();
        } else {
          ;
        }
            out = new TryExpression(line, (InExpression) expression, clauses, statement);
      } else if (jj_2_40(2147483647)) {
        jj_consume_token(RAISE);
                    line = token.beginLine;
        expression = inExpression();
            out = new RaiseExpression(line, expression);
      } else if (jj_2_41(2147483647)) {
        jj_consume_token(THREAD);
                     line = token.beginLine;
        expression = inExpression();
            out = new ThreadExpression(line, (InExpression) expression);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Declaration nestDecVariable() throws ParseException {
    int line = 0;
    Declaration out = null;
    InStatement statement = null;
    InExpression expression = null;
    String name = null;
    boolean lazy = false;
    Pattern aPattern = null;
    ArrayList<Pattern> args = new ArrayList<Pattern>();
    ImportClause importClause = null;
    ArrayList<ImportClause> imports = new ArrayList<ImportClause>();
    ExportClause exportClause = null;
    ArrayList<ExportClause> exports = new ArrayList<ExportClause>();
    ClassDescriptor aDescriptor = null;
    ArrayList<ClassDescriptor> descriptors = new ArrayList<ClassDescriptor>();
    ClassElement classElement = null;
    ArrayList<MethodDef> methods = new ArrayList<MethodDef>();
    {Logger.debug("Entering nestDecVariable()");}
    try {
      if (jj_2_42(2147483647)) {
            Logger.debug("Found a Procedure definition");
        jj_consume_token(DEFPROC);
                      line = token.beginLine;
        jj_consume_token(VARIABLE);
                       name = token.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          aPattern = pattern();
                                 args.add(aPattern);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_14;
            }
            jj_consume_token(COMMA);
            aPattern = pattern();
                                           args.add(aPattern);
          }
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        statement = inStatement();
            out = new ProcedureDef(line, name, args, statement);
      } else if (jj_2_43(2147483647)) {
            Logger.debug("Found a Function definition");
        jj_consume_token(DEF);
                  line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAZY:
          jj_consume_token(LAZY);
                    lazy = true;
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(VARIABLE);
                       name = token.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          aPattern = pattern();
                                 args.add(aPattern);
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_15;
            }
            jj_consume_token(COMMA);
            aPattern = pattern();
                                           args.add(aPattern);
          }
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        expression = inExpression();
            out = new FunctionDef(line, name, args, expression, lazy);
      } else if (jj_2_44(2147483647)) {
        jj_consume_token(FUNCTOR);
                      line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          jj_consume_token(VARIABLE);
                         name = token.image;
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case IMPORT:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_16;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT:
            jj_consume_token(IMPORT);
            importClause = importClause();
                                                       imports.add(importClause);
            label_17:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[12] = jj_gen;
                break label_17;
              }
              jj_consume_token(COMMA);
              importClause = importClause();
                                                        imports.add(importClause);
            }
            break;
          case EXPORT:
            jj_consume_token(EXPORT);
            exportClause = exportClause();
                                                       exports.add(exportClause);
            label_18:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[13] = jj_gen;
                break label_18;
              }
              jj_consume_token(COMMA);
              exportClause = exportClause();
                                                        exports.add(exportClause);
            }
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        statement = inStatement();
            out = new FunctorDef(line, name, imports, exports, statement);
      } else if (jj_2_45(2147483647)) {
        jj_consume_token(CLASS);
                    line = token.beginLine;
        jj_consume_token(VARIABLESTRICT);
                             name = token.image;
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
          case EXTENDS:
          case PROP:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_19;
          }
          aDescriptor = classDescriptor();
                                              descriptors.add(aDescriptor);
        }
        jj_consume_token(LCURLY);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
          case DEF:
          case EXTENDS:
          case PROP:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_20;
          }
          classElement = classElementDef();
              if(classElement instanceof MethodDef){
                methods.add((MethodDef) classElement);
              } else if(classElement instanceof ClassDescriptor) {
                descriptors.add((ClassDescriptor) classElement);
              }
        }
        jj_consume_token(RCURLY);
            out = new ClassDef(line, name, descriptors, methods);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Expression nestDecAnonym() throws ParseException {
    int line = 0;
    Expression out = null;
    InStatement statement = null;
    InExpression expression = null;
    boolean lazy = false;
    Pattern aPattern = null;
    ArrayList<Pattern> args = new ArrayList<Pattern>();
    ImportClause importClause = null;
    ArrayList<ImportClause> imports = new ArrayList<ImportClause>();
    ExportClause exportClause = null;
    ArrayList<ExportClause> exports = new ArrayList<ExportClause>();
    ClassDescriptor aDescriptor = null;
    ArrayList<ClassDescriptor> descriptors = new ArrayList<ClassDescriptor>();
    ClassElement classElement = null;
    ArrayList<MethodDef> methods = new ArrayList<MethodDef>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFPROC:
        jj_consume_token(DEFPROC);
                    line = token.beginLine;
        jj_consume_token(DOLLAR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          aPattern = pattern();
                                 args.add(aPattern);
          label_21:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_21;
            }
            jj_consume_token(COMMA);
            aPattern = pattern();
                                           args.add(aPattern);
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        statement = inStatement();
            out = new ProcedureDefAnonym(line, args, statement, null);
        break;
      case DEF:
        jj_consume_token(DEF);
                  line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAZY:
          jj_consume_token(LAZY);
                    lazy = true;
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        jj_consume_token(DOLLAR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          aPattern = pattern();
                                 args.add(aPattern);
          label_22:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[20] = jj_gen;
              break label_22;
            }
            jj_consume_token(COMMA);
            aPattern = pattern();
                                           args.add(aPattern);
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        expression = inExpression();
            out = new FunctionDefAnonym(line, args, expression, lazy, null);
        break;
      case FUNCTOR:
        jj_consume_token(FUNCTOR);
                      line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR:
          jj_consume_token(DOLLAR);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case IMPORT:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_23;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT:
            jj_consume_token(IMPORT);
            importClause = importClause();
                                                       imports.add(importClause);
            label_24:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[24] = jj_gen;
                break label_24;
              }
              jj_consume_token(COMMA);
              importClause = importClause();
                                                        imports.add(importClause);
            }
            break;
          case EXPORT:
            jj_consume_token(EXPORT);
            exportClause = exportClause();
                                                       exports.add(exportClause);
            label_25:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[25] = jj_gen;
                break label_25;
              }
              jj_consume_token(COMMA);
              exportClause = exportClause();
                                                        exports.add(exportClause);
            }
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        statement = inStatement();
            out = new FunctorDefAnonym(line, imports, exports, statement, null);
        break;
      case CLASS:
        jj_consume_token(CLASS);
                    line = token.beginLine;
        jj_consume_token(DOLLAR);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
          case EXTENDS:
          case PROP:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_26;
          }
          aDescriptor = classDescriptor();
                                              descriptors.add(aDescriptor);
        }
        jj_consume_token(LCURLY);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
          case DEF:
          case EXTENDS:
          case PROP:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_27;
          }
          classElement = classElementDef();
              if(classElement instanceof MethodDef){
                methods.add((MethodDef) classElement);
              } else if(classElement instanceof ClassDescriptor) {
                descriptors.add((ClassDescriptor) classElement);
              }
        }
        jj_consume_token(RCURLY);
            out = new ClassDefAnonym(line, descriptors, methods, null);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private ImportClause importClause() throws ParseException {
    int line = 0;
    String name = null;
    String label = null;
    Variable var = null;
    Map<String, Variable> map = new HashMap<String, Variable>();
    String source = null;
    try {
      jj_consume_token(VARIABLESTRICT);
                           line = token.beginLine; name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOM:
          jj_consume_token(ATOM);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                    label = token.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          jj_consume_token(VARIABLE);
                                  var = new Variable(token.beginLine, token.image, true, false);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
              map.put(label, var);
        label_28:
        while (true) {
          if (jj_2_46(2147483647)) {
            ;
          } else {
            break label_28;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            jj_consume_token(ATOM);
            break;
          case INT:
            jj_consume_token(INT);
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                     label = token.image; var = null;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
            jj_consume_token(COLON);
            jj_consume_token(VARIABLE);
                                  var = new Variable(token.beginLine, token.image, true, false);
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
              map.put(label, var);
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        jj_consume_token(FROM);
        jj_consume_token(ATOM);
                          source = token.image;
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new ImportClause(line, name, map, source);}
    throw new Error("Missing return statement in function");
  }

  final private ExportClause exportClause() throws ParseException {
    int line = 0;
    String label = null;
    Variable var = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOM:
      case INT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOM:
          jj_consume_token(ATOM);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                           line = token.beginLine; label = token.image;
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(VARIABLE);
          line = (line!=0 ? line : token.beginLine);
          var = new Variable(token.beginLine, token.image, false, true);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new ExportClause(line, label, var);}
    throw new Error("Missing return statement in function");
  }

  final private ClassElement classElementDef() throws ParseException {
    int line = 0;
    ClassElement out = null;
    MethodHead aMethodHead = null;
    Variable name = null;
    InExpression expression = null;
    InStatement statement = null;
    ClassDescriptor descriptor = null;
    try {
      if (jj_2_49(2147483647)) {
        jj_consume_token(DEF);
                  line = token.beginLine;
        aMethodHead = methHead();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          jj_consume_token(VARIABLE);
                                 name = new Variable(line, token.image, true, false);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        if (jj_2_47(2147483647)) {
          expression = inExpression();
        } else if (jj_2_48(2147483647)) {
          statement = inStatement();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
            out = new MethodDef(line, aMethodHead, name, expression, statement);
      } else if (jj_2_50(2147483647)) {
        descriptor = classDescriptor();
            out = descriptor;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private CaseStatementClause caseStatementClause(boolean firstClausePassed) throws ParseException {
    int line = 0;
    CaseStatementClause out = null;
    InStatement statement = null;
    Pattern pattern = null;
    Operator op = null;
    ArrayList<Operator> ops = new ArrayList<Operator>();
    Expression expression = null;
    ArrayList<Expression> exprs = new ArrayList<Expression>();
    try {
      pattern = pattern();
                              line = pattern.line();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
        case LOR:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          jj_consume_token(LAND);
                    op = Operator.LAND;
          break;
        case LOR:
          jj_consume_token(LOR);
                    op = Operator.LOR;
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression = conditionalExpression();
            ops.add(op); exprs.add(expression);
      }
      jj_consume_token(IMPL);
      statement = inStatement();
          out = new CaseStatementClause(line, pattern, ops, exprs, statement, !firstClausePassed);
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private CaseExpressionClause caseExpressionClause(boolean firstClausePassed) throws ParseException {
    int line = 0;
    CaseExpressionClause out = null;
    InExpression expression = null;
    Pattern pattern = null;
    Operator op = null;
    ArrayList<Operator> ops = new ArrayList<Operator>();
    Expression aExpression = null;
    ArrayList<Expression> exprs = new ArrayList<Expression>();
    {Logger.debug("Entering caseExpressionClause()");}
    try {
      pattern = pattern();
                              line = pattern.line();
      label_30:
      while (true) {
        if (jj_2_51(2147483647)) {
          ;
        } else {
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          jj_consume_token(LAND);
                    op = Operator.LAND;
          break;
        case LOR:
          jj_consume_token(LOR);
                    op = Operator.LOR;
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        aExpression = expression();
            ops.add(op); exprs.add(aExpression);
      }
      jj_consume_token(IMPL);
      expression = inExpression();
          out = new CaseExpressionClause(line, pattern, ops, exprs, expression, !firstClausePassed);
    } catch (ParseException e) {
       recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Expression assignmentExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering assignmentExpression()");}
    try {
      lhs = conditionalExpression();
                                        line = token.beginLine;
      if (jj_2_52(2147483647)) {
        jj_consume_token(ASSIGN);
        rhs = assignmentExpression();
                  lhs = new OperationAssignment(line, lhs, rhs);
      } else {
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Statement assignmentStatement() throws ParseException {
    int line = 0;
    Statement out = null;
    Variable lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering assignmentStatement()");}
    try {
      jj_consume_token(VARIABLE);
          lhs = new Variable(token.beginLine, token.image, false, false);
      jj_consume_token(ASSIGN);
      rhs = expression();
          out = new OperationAssignment(line, lhs, rhs);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Expression conditionalExpression() throws ParseException {
    //int line = 0;
    Expression lhs = null;
    {Logger.debug("Entering conditionalExpression()");}
    try {
      lhs = conditionalOrExpression();
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression conditionalOrExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering conditionalOrExpression()");}
    try {
      lhs = conditionalAndExpression();
                                           line = token.beginLine;
      label_31:
      while (true) {
        if (jj_2_53(2147483647)) {
          ;
        } else {
          break label_31;
        }
        jj_consume_token(LOR);
        rhs = conditionalAndExpression();
              lhs = new OperationLogicalOr(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression conditionalAndExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering conditionalAndExpression()");}
    try {
      lhs = equalityExpression();
                                     line = token.beginLine;
      label_32:
      while (true) {
        if (jj_2_54(2147483647)) {
          ;
        } else {
          break label_32;
        }
        jj_consume_token(LAND);
        rhs = equalityExpression();
              lhs = new OperationLogicalAnd(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression equalityExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering equalityExpression()");}
    try {
      lhs = relationalExpression();
                                       line = token.beginLine;
      label_33:
      while (true) {
        if (jj_2_55(2147483647)) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(EQUAL);
        rhs = relationalExpression();
              lhs = new OperationEqual(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression relationalExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering relationalExpression()");}
    try {
      lhs = additiveExpression();
                                     line = token.beginLine;
      if (jj_2_56(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          rhs = additiveExpression();
                                               lhs = new OperationGreaterThan(line, lhs, rhs);
          break;
        case GE:
          jj_consume_token(GE);
          rhs = additiveExpression();
                                                lhs = new OperationGreaterEqual(line, lhs, rhs);
          break;
        case LT:
          jj_consume_token(LT);
          rhs = additiveExpression();
                                                lhs = new OperationSmallerThan(line, lhs, rhs);
          break;
        case LE:
          jj_consume_token(LE);
          rhs = additiveExpression();
                                                lhs = new OperationSmallerEqual(line, lhs, rhs);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression additiveExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering additiveExpression()");}
    try {
      lhs = multiplicativeExpression();
                                           line = token.beginLine;
      label_34:
      while (true) {
        if (jj_2_57(2147483647)) {
          ;
        } else {
          break label_34;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
              Logger.debug("Found an additiveExpression");
              lhs = new OperationPlus(line, lhs, rhs);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
                  lhs = new OperationMinus(line, lhs, rhs);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression multiplicativeExpression() throws ParseException {
    int line = 0;
    Expression lhs = null;
    Expression rhs = null;
    {Logger.debug("Entering multiplicativeExpression()");}
    try {
      lhs = unaryExpression();
                                  line = token.beginLine;
      label_35:
      while (true) {
        if (jj_2_58(2147483647)) {
          ;
        } else {
          break label_35;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          rhs = unaryExpression();
                  lhs = new OperationMultiplication(line, lhs, rhs);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          rhs = unaryExpression();
                  lhs = new OperationDivision(line, lhs, rhs);
          break;
        case MODULO:
          jj_consume_token(MODULO);
          rhs = unaryExpression();
                  lhs = new OperationModulo(line, lhs, rhs);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private Expression unaryExpression() throws ParseException {
    int line = 0;
    Expression expr = null;
    Expression expr2 = null;
    {Logger.debug("Entering unaryExpression()");}
    try {
      if (jj_2_59(2147483647)) {
        expr = simpleUnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
                  line = token.beginLine;
          expr2 = unaryExpression();
              expr = new OperationValidate(line, expr2);
          break;
        case MINUS:
          jj_consume_token(MINUS);
                    line = token.beginLine;
          expr2 = unaryExpression();
              expr = new OperationNegate(line, expr2);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private Expression simpleUnaryExpression() throws ParseException {
    int line = 0;
    Expression expr = null;
    Expression expr2 = null;
    try {
      if (jj_2_60(2147483647)) {
        expr = postfixExpression();
      } else if (jj_2_61(2147483647)) {
        jj_consume_token(LNOT);
                 line = token.beginLine;
        expr2 = unaryExpression();
          expr = new OperationLogicalNot(line, expr2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private Expression postfixExpression() throws ParseException {
    int line = 0;
    Expression out = null;
    Expression expr = null;
    Variable variable = null;
    {Logger.debug("Entering postfixExpression()");}
    try {
      out = primary();
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Expression primary() throws ParseException {
    int line = 0;
    Expression out = null;
    Expression expr = null;
    Variable variable = null;
    String name = null;
    Expression arg = null;
    ArrayList<Expression> args = new ArrayList<Expression>();
    {Logger.debug("Entering primary()");}
    try {
      if (jj_2_65(2147483647)) {
        out = parExpression();
      } else if (jj_2_66(2147483647)) {
        jj_consume_token(UNIT);
                                       out = new Literal(token.beginLine, Type.UNIT, false);
      } else if (jj_2_67(2147483647)) {
        jj_consume_token(TRUE);
                                       out = new Literal(token.beginLine, Type.BOOLEAN, true, false);
      } else if (jj_2_68(2147483647)) {
        jj_consume_token(FALSE);
                                         out = new Literal(token.beginLine, Type.BOOLEAN, false, false);
      } else if (jj_2_69(2147483647)) {
        jj_consume_token(UNDERSCORE);
                                                   out = new Literal(token.beginLine, Type.UNDERSCORE, false);
      } else if (jj_2_70(2147483647)) {
        jj_consume_token(NIL);
                                     out = new Literal(token.beginLine, Type.NIL, false);
      } else if (jj_2_71(2147483647)) {
        jj_consume_token(INT);
                                     out = new Literal(token.beginLine, Type.INT, token.image, false);
      } else if (jj_2_72(2147483647)) {
        jj_consume_token(FLOAT);
                                         out = new Literal(token.beginLine, Type.FLOAT, token.image, false);
      } else if (jj_2_73(2147483647)) {
        jj_consume_token(CHARACTER);
                                                 out = new Literal(token.beginLine, Type.CHAR, token.image, false);
      } else if (jj_2_74(2147483647)) {
                                 Logger.debug("Found a String");
        jj_consume_token(STRING);
                                                                             out = new Literal(token.beginLine, Type.STRING, token.image, false);
      } else if (jj_2_75(2147483647)) {
        jj_consume_token(VARIABLE);
                       variable = new Variable(token.beginLine, token.image, false, false);
        jj_consume_token(DOT);
        jj_consume_token(VARIABLE);
            name = token.image;
            out = new ExpressionSelectionFeature(line, variable, name);
        if (jj_2_62(2147483647)) {
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case DEF:
          case DEFPROC:
          case FALSE:
          case FUNCTOR:
          case IF:
          case MATCH:
          case NIL:
          case RAISE:
          case SUPER:
          case THIS:
          case THREAD:
          case TRUE:
          case TRY:
          case UNIT:
          case LNOT:
          case MINUS:
          case PLUS:
          case UNDERSCORE:
          case DOLLAR:
          case LBRACK:
          case LCURLY:
          case LPAREN:
          case VARIABLE:
          case ATOMLISP:
          case STRING:
          case CHARACTER:
          case INT:
          case FLOAT:
            arg = expression();
                                     args.add(arg);
            label_36:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[46] = jj_gen;
                break label_36;
              }
              jj_consume_token(COMMA);
              arg = expression();
                                               args.add(arg);
            }
            break;
          default:
            jj_la1[47] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
                out = new ExpressionSelectionMethod(line, variable, name, args);
        } else {
          ;
        }
      } else if (jj_2_76(2147483647)) {
        jj_consume_token(VARIABLE);
                       line = token.beginLine; name = token.image;
            Logger.debug("Found a CallFunction to "+name+" at line "+line);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FALSE:
        case FUNCTOR:
        case IF:
        case MATCH:
        case NIL:
        case RAISE:
        case SUPER:
        case THIS:
        case THREAD:
        case TRUE:
        case TRY:
        case UNIT:
        case LNOT:
        case MINUS:
        case PLUS:
        case UNDERSCORE:
        case DOLLAR:
        case LBRACK:
        case LCURLY:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          expr = expression();
                                  args.add(expr);
          label_37:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[48] = jj_gen;
              break label_37;
            }
            jj_consume_token(COMMA);
            expr = expression();
                                            args.add(expr);
          }
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
            out = new CallFunction(line, name, args);
      } else if (jj_2_77(2147483647)) {
        jj_consume_token(THIS);
                   line = token.beginLine; out = new ThisExpression(line);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARIABLE:
            jj_consume_token(VARIABLE);
            break;
          case VARIABLESTRICT:
            jj_consume_token(VARIABLESTRICT);
            break;
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                  variable = new Variable(line, token.image, false, false);
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case DEF:
          case DEFPROC:
          case FALSE:
          case FUNCTOR:
          case IF:
          case MATCH:
          case NIL:
          case RAISE:
          case SUPER:
          case THIS:
          case THREAD:
          case TRUE:
          case TRY:
          case UNIT:
          case LNOT:
          case MINUS:
          case PLUS:
          case UNDERSCORE:
          case DOLLAR:
          case LBRACK:
          case LCURLY:
          case LPAREN:
          case VARIABLE:
          case ATOMLISP:
          case STRING:
          case CHARACTER:
          case INT:
          case FLOAT:
            arg = expression();
                                     args.add(arg);
            label_38:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[51] = jj_gen;
                break label_38;
              }
              jj_consume_token(COMMA);
              arg = expression();
                                                 args.add(arg);
            }
            break;
          default:
            jj_la1[52] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
              out = new Call(line, variable.name(), args);
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
      } else if (jj_2_78(2147483647)) {
        jj_consume_token(SUPER);
                    line = token.beginLine;
        if (jj_2_63(2147483647)) {
          jj_consume_token(LPAREN);
          jj_consume_token(VARIABLESTRICT);
                                          name = token.image;
          jj_consume_token(RPAREN);
        } else {
          ;
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          jj_consume_token(VARIABLE);
          break;
        case VARIABLESTRICT:
          jj_consume_token(VARIABLESTRICT);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                  variable = new Variable(token.beginLine, token.image, false, false);
        jj_consume_token(LPAREN);
        if (jj_2_64(2147483647)) {
          arg = expression();
                                     args.add(arg);
          label_39:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[55] = jj_gen;
              break label_39;
            }
            jj_consume_token(COMMA);
            arg = expression();
                                                 args.add(arg);
          }
        } else {
          ;
        }
        jj_consume_token(RPAREN);
              out = new Call(line, variable.name(), args, name);
      } else if (jj_2_79(2147483647)) {
        jj_consume_token(VARIABLE);
                       variable = new Variable(token.beginLine, token.image, false, true); out=variable;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          expr = expression();
            out = new ExpressionSelectionList(line, variable, expr);
            Logger.debug("Found a list selection arg:"+variable.name());
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      Logger.debug("Returning primary "+((out instanceof Variable) ? ((Variable)out).name() :
        ((out instanceof Literal) ? ((Literal)out).image() : "")));

    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Expression term() throws ParseException {
    int line = 0;
    Expression out = null;
    String value = null;
    Feature aFeature = null;
    Expression val = null;
    Map<Feature, Expression> map = new HashMap<Feature, Expression>();
    int lostLabelsCounter = 0;
    boolean more = false;
    ArrayList<Expression> args = new ArrayList<Expression>();
    {Logger.debug("Entering term()");}
    try {
      if (jj_2_83(2147483647)) {
        jj_consume_token(ATOMLISP);
                       line = token.beginLine; value = token.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case DEF:
        case DEFPROC:
        case FALSE:
        case FUNCTOR:
        case IF:
        case MATCH:
        case NIL:
        case RAISE:
        case SUPER:
        case THIS:
        case THREAD:
        case TRUE:
        case TRY:
        case UNIT:
        case LNOT:
        case MINUS:
        case PLUS:
        case UNDERSCORE:
        case DOLLAR:
        case LBRACK:
        case LCURLY:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          if (jj_2_80(2147483647)) {
            aFeature = feature();
            jj_consume_token(COLON);
              map.put(aFeature, null);
          } else {
            ;
          }
          val = expression();
              if(aFeature==null){
              map.put(new Feature(line, lostLabelsCounter), val);
              lostLabelsCounter++;
            } else {
              map.put(aFeature, val);
            }
          label_40:
          while (true) {
            if (jj_2_81(2147483647)) {
              ;
            } else {
              break label_40;
            }
            jj_consume_token(COMMA);
                     aFeature = null;
            if (jj_2_82(2147483647)) {
              aFeature = feature();
              jj_consume_token(COLON);
                map.put(aFeature, null);
            } else {
              ;
            }
            val = expression();
              if(aFeature==null){
                map.put(new Feature(line, lostLabelsCounter), val);
                lostLabelsCounter++;
              } else {
                map.put(aFeature, val);
              }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            jj_consume_token(ELLIPSIS);
                                 more = true;
            break;
          default:
            jj_la1[57] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
            out = new Record(line, value, map, more);
      } else if (jj_2_84(2147483647)) {
        jj_consume_token(LPAREN);
                     line = token.beginLine;
        val = expression();
                               args.add(val);
        label_41:
        while (true) {
          jj_consume_token(HASHTAG);
          val = expression();
                                          args.add(val);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASHTAG:
            ;
            break;
          default:
            jj_la1[59] = jj_gen;
            break label_41;
          }
        }
        jj_consume_token(RPAREN);
            out = new Tuple(line, args);
      } else if (jj_2_85(2147483647)) {
        jj_consume_token(LPAREN);
                     line = token.beginLine;
        val = expression();
                               args.add(val);
        label_42:
        while (true) {
          jj_consume_token(COLCOL);
          val = expression();
                                         args.add(val);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLCOL:
            ;
            break;
          default:
            jj_la1[60] = jj_gen;
            break label_42;
          }
        }
        jj_consume_token(RPAREN);
            out = new List(line, args, true);
      } else if (jj_2_86(2147483647)) {
        jj_consume_token(LBRACK);
                     line = token.beginLine;
        val = expression();
                               args.add(val);
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[61] = jj_gen;
            break label_43;
          }
          jj_consume_token(COMMA);
          val = expression();
                                 args.add(val);
        }
        jj_consume_token(RBRACK);
           out = new List(line, args, false);
      } else if (jj_2_87(2147483647)) {
        out = assignmentExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Pattern pattern() throws ParseException {
    int line = 0;
    Pattern out = null;
    boolean bool = true;
    String value = null;
    Feature aFeature = null;
    Pattern val = null;
    Map<Feature, Pattern> map = new HashMap<Feature, Pattern>();
    boolean more = false;
    ArrayList<Pattern> patterns = new ArrayList<Pattern>();
    int lostLabelsCounter = 0;
    {Logger.debug("Entering pattern()");}
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIT:
        jj_consume_token(UNIT);
                   out = new Literal(token.beginLine, Type.UNIT, true);
        break;
      case TRUE:
        jj_consume_token(TRUE);
                   out = new Literal(token.beginLine, Type.BOOLEAN, true, true);
        break;
      case FALSE:
        jj_consume_token(FALSE);
                    out = new Literal(token.beginLine, Type.BOOLEAN, false, true);
        break;
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
                         out = new Literal(token.beginLine, Type.UNDERSCORE, true);
        break;
      case NIL:
        jj_consume_token(NIL);
                  out = new Literal(token.beginLine, Type.NIL, true);
        break;
      case INT:
        jj_consume_token(INT);
                  out = new Literal(token.beginLine, Type.INT, token.image, true);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
                    out = new Literal(token.beginLine, Type.FLOAT, token.image, true);
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
                        out = new Literal(token.beginLine, Type.CHAR, token.image, true);
        break;
      case STRING:
        jj_consume_token(STRING);
                     out = new Literal(token.beginLine, Type.STRING, token.image, true);
        break;
      case VARIABLE:
        jj_consume_token(VARIABLE);
                       out = new Variable(token.beginLine, token.image, true, true, false);
        break;
      case ATOMLISP:
        jj_consume_token(ATOMLISP);
                       line = token.beginLine; value = token.image;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NIL:
        case TRUE:
        case UNIT:
        case UNDERSCORE:
        case LBRACK:
        case LPAREN:
        case VARIABLE:
        case ATOMLISP:
        case STRING:
        case CHARACTER:
        case INT:
        case FLOAT:
          if (jj_2_88(2147483647)) {
            aFeature = feature();
            jj_consume_token(COLON);
              map.put(aFeature, null);
          } else {
            ;
          }
          val = pattern();
            if(aFeature==null){
               map.put(new Feature(line, lostLabelsCounter), val);
               lostLabelsCounter++;
           } else {
               map.put(aFeature, val);
           }
          label_44:
          while (true) {
            if (jj_2_89(2147483647)) {
              ;
            } else {
              break label_44;
            }
            jj_consume_token(COMMA);
            if (jj_2_90(2147483647)) {
              aFeature = feature();
              jj_consume_token(COLON);
                map.put(aFeature, null);
            } else {
              ;
            }
            val = pattern();
               if(aFeature==null){
                 map.put(new Feature(line, lostLabelsCounter), val);
                 lostLabelsCounter++;
               } else {
                 map.put(aFeature, val);
               }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            jj_consume_token(ELLIPSIS);
                                 more = true;
            break;
          default:
            jj_la1[62] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
             out = new Record(line, value, map, more, true);
        break;
      default:
        jj_la1[67] = jj_gen;
        if (jj_2_91(2147483647)) {
          jj_consume_token(LPAREN);
                     line = token.beginLine;
          val = pattern();
                            patterns.add(val);
          label_45:
          while (true) {
            jj_consume_token(HASHTAG);
            val = pattern();
                                       patterns.add(val);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HASHTAG:
              ;
              break;
            default:
              jj_la1[64] = jj_gen;
              break label_45;
            }
          }
          jj_consume_token(RPAREN);
            out = new Tuple(line, patterns, true);
        } else if (jj_2_92(2147483647)) {
          jj_consume_token(LPAREN);
                     line = token.beginLine;
          val = pattern();
                            patterns.add(val);
          label_46:
          while (true) {
            jj_consume_token(COLCOL);
            val = pattern();
                                      patterns.add(val);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COLCOL:
              ;
              break;
            default:
              jj_la1[65] = jj_gen;
              break label_46;
            }
          }
          jj_consume_token(RPAREN);
            out = new List(line, patterns, true, true); Logger.debug("Returning List pattern");
        } else if (jj_2_93(2147483647)) {
          jj_consume_token(LBRACK);
                     line = token.beginLine;
          val = pattern();
                            patterns.add(val);
          label_47:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[66] = jj_gen;
              break label_47;
            }
            jj_consume_token(COMMA);
            val = pattern();
                              patterns.add(val);
          }
          jj_consume_token(RBRACK);
            out = new List(line, patterns, false, true);
        } else if (jj_2_94(2147483647)) {
          jj_consume_token(LPAREN);
          val = pattern();
                            out = val;
          jj_consume_token(RPAREN);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Declaration declarationPart() throws ParseException {
    int line = 0;
    boolean constant;
    Declaration out = null;
    Variable variable = null;
    Expression value = null;
    Map<Variable, Expression> map = new HashMap<Variable, Expression>();
    {Logger.debug("Entering declarationPart()");}
    try {
      if (jj_2_96(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAL:
          jj_consume_token(VAL);
                line = token.beginLine; constant = true;
          break;
        case VAR:
          jj_consume_token(VAR);
                line = token.beginLine; constant = false;
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(VARIABLE);
                   variable = new Variable(line, token.image, constant, true, false);
          map.put(variable, null);
          Logger.debug("Declaring variable "+token.image+" as a constant("+constant+")");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          value = expression();
        map.put(variable, value);
          break;
        default:
          jj_la1[69] = jj_gen;
          ;
        }
        label_48:
        while (true) {
          if (jj_2_95(2147483647)) {
            ;
          } else {
            break label_48;
          }
          jj_consume_token(COMMA);
          jj_consume_token(VARIABLE);
                             variable = new Variable(line, token.image, constant, true, false);
           map.put(variable, null);
           Logger.debug("Declaring variable "+token.image+" as a constant("+constant+")");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
            jj_consume_token(ASSIGN);
            value = expression();
          map.put(variable, value);
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
        }
        out = new Declaration(line, map, constant);
      } else if (jj_2_97(2147483647)) {
        out = nestDecVariable();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
      recoverFromError(new int[]{RCURLY}, e);
    }
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private LoopDeclaration loopDeclaration() throws ParseException {
    int line = 0;
    LoopDeclaration out = null;
    Variable var = null;
    Expression generator = null;
    Expression init = null;
    Expression cond = null;
    Expression step = null;
    Expression end = null;
    try {
      if (jj_2_98(2147483647)) {
        jj_consume_token(VARIABLE);
                     line = token.beginLine; var = new Variable(line, token.image, true, false);
        jj_consume_token(IN);
        init = expression();
        jj_consume_token(DOTDOT);
        end = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          jj_consume_token(SEMI);
          step = expression();
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
           out = new LoopDeclaration(line, var, init, null, step, end);
      } else if (jj_2_99(2147483647)) {
        jj_consume_token(VARIABLE);
                     line = token.beginLine; var = new Variable(line, token.image, true, false);
        jj_consume_token(IN);
        init = expression();
        jj_consume_token(SEMI);
        step = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          jj_consume_token(SEMI);
          end = expression();
              cond=step; step=end;
          break;
        default:
          jj_la1[72] = jj_gen;
          ;
        }
            out = new LoopDeclaration(line, var, init, cond, step, null);
      } else if (jj_2_100(2147483647)) {
        jj_consume_token(VARIABLE);
                     line = token.beginLine; var = new Variable(line, token.image, true, false);
        jj_consume_token(IN);
        generator = expression();
            out = new LoopDeclaration(line, var, generator);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[]{RCURLY}, e );
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private Feature feature() throws ParseException {
    int line = 0;
    String image = null;
    try {
      jj_consume_token(ATOMLISP);
                     line = token.beginLine; image = token.image;
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new Feature(line, image);}
    throw new Error("Missing return statement in function");
  }

  final private ClassDescriptor classDescriptor() throws ParseException {
    int line = 0;
    ClassDescriptor out = null;
    ArrayList<String> extensions = new ArrayList<String>();
    Variable var = null;
    Expression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
                    line = token.beginLine;
        jj_consume_token(VARIABLESTRICT);
                             extensions.add(token.image);
        label_49:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_49;
          }
          jj_consume_token(COMMA);
          jj_consume_token(VARIABLESTRICT);
                               extensions.add(token.image);
        }
            out = new ClassDescriptor(line, SubType.EXTENSION, extensions);
        break;
      case ATTR:
        jj_consume_token(ATTR);
                   line = token.beginLine;
        jj_consume_token(VARIABLE);
                       var = new Variable(line, token.image, false, true, false);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          expr = expression();
          break;
        default:
          jj_la1[74] = jj_gen;
          ;
        }
            out = new ClassDescriptor(line, SubType.ATTRIBUTE, var, expr);
        break;
      case PROP:
        jj_consume_token(PROP);
                   line = token.beginLine;
        jj_consume_token(VARIABLE);
            var = new Variable(line, token.image, true, false);
            out = new ClassDescriptor(line, SubType.PROPERTY, var, null);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final private MethodHead methHead() throws ParseException {
    int line = 0;
    boolean priv = false;
    String name = null;
    MethodArg arg = null;
    ArrayList<MethodArg> args = new ArrayList<MethodArg>();
    boolean moreArgs = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLESTRICT:
        jj_consume_token(VARIABLESTRICT);
                             line = token.beginLine; priv = true; name = token.image;
        break;
      case VARIABLE:
        jj_consume_token(VARIABLE);
                         line = token.beginLine; priv = false; name = token.image;
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERSCORE:
      case VARIABLE:
      case ATOMLISP:
        arg = methArg();
                            args.add(arg);
        label_50:
        while (true) {
          if (jj_2_101(2147483647)) {
            ;
          } else {
            break label_50;
          }
          jj_consume_token(COMMA);
          arg = methArg();
                                      args.add(arg);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(ELLIPSIS);
              moreArgs = true;
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new MethodHead(line, name, priv, args, moreArgs);}
    throw new Error("Missing return statement in function");
  }

  final private MethodArg methArg() throws ParseException {
    int line = 0;
    Feature feature = null;
    String name = null;
    Expression defaultValue = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOMLISP:
        feature = feature();
                              feature.line();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
                       name = token.image;
        break;
      case UNDERSCORE:
        jj_consume_token(UNDERSCORE);
                           name = token.image;
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
        jj_consume_token(LE);
        defaultValue = expression();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[]{RCURLY}, e);
    }
      {if (true) return new MethodArg(line, feature, name, defaultValue);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_3R_76() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(THREAD)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(RAISE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(LNOT)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_268()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(MATCH)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_238()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    }
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(LOCK)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(THREAD)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(FINALLY)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(LOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(THREAD)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(RAISE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_267()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3R_231()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(MATCH)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    }
    }
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    if (jj_3R_229()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(VARIABLESTRICT)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(PROP)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(ATOMLISP)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(DOTDOT)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(DOTDOT)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(LOR)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(LAND)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IMPL)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(SKP)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(LOR)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    if (jj_scan_token(VARIABLE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_156()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(LAND)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IMPL)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(DEF)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(HASHTAG)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    if (jj_3R_214()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(DEF)) return true;
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_296()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(HASHTAG)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    if (jj_3R_213()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_273() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(ATOMLISP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(VARIABLESTRICT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(HASHTAG)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(COLCOL)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_151()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(HASHTAG)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_150()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LCURLY)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_283()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_284()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) return true;
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(FUNCTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(ATOMLISP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(LAZY)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(DEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(ATOMLISP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(DEFPROC)) return true;
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    if (jj_scan_token(DOT)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(VARIABLESTRICT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LCURLY)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(FUNCTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_275()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_283()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(FUNCTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_289()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(DEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(LAZY)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(DEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(DEFPROC)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(DEFPROC)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(THREAD)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaCCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[82];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x90000000,0x90040000,0x90000000,0x40190000,0x90000000,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x1000000,0x0,0x0,0x1000000,0x2001000,0x2081000,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x1000000,0x0,0x0,0x1000000,0x2001000,0x2081000,0x40190000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc4190000,0x0,0xc4190000,0x0,0x0,0xc4190000,0x0,0x0,0x0,0x0,0x0,0xc4190000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2001000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x14218,0x14218,0x14a18,0xc0000,0x14a18,0x0,0x28040,0x4,0x0,0x28040,0x0,0x1,0x0,0x0,0x1,0x100,0x100,0x0,0x28040,0x4,0x0,0x28040,0x0,0x1,0x0,0x0,0x1,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x3c000000,0x0,0x0,0x0,0x0,0x3f250,0x0,0x3f250,0x0,0x0,0x3f250,0x0,0x0,0x0,0x0,0x0,0x3f250,0x0,0x0,0x0,0x0,0x28040,0x0,0x0,0x0,0x28040,0xc0000,0x100000,0x100000,0x0,0x0,0x0,0x100000,0x100,0x0,0x0,0x0,0x0,0x0,0x10000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000000,0x2000000,0x2000000,0x0,0x2000000,0x800000,0x5002000,0x0,0x800000,0x5002000,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x800000,0x5002000,0x0,0x800000,0x5002000,0x4000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x4000000,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x0,0x30,0x8c0,0x30,0x800000,0x7006034,0x800000,0x7006034,0x0,0x800000,0x7006034,0x0,0x0,0x800000,0x0,0x800000,0x7006034,0x1000,0x400000,0x800000,0x800000,0x5002000,0x1000,0x400000,0x800000,0x2000,0x0,0x0,0x0,0x40000000,0x40000000,0x800000,0x0,0x0,0x0,0x800000,0x2000,0x0,0x2000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x10,0x10,0x10,0x0,0x10,0x0,0x7d0,0x0,0x0,0x7d0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7d0,0x0,0x0,0x7d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220,0x0,0x220,0x0,0x0,0x0,0x220,0x220,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7d0,0x0,0x7d0,0x18,0x0,0x7d0,0x1,0x18,0x0,0x1,0x0,0x7d0,0x0,0x0,0x0,0x0,0x7d0,0x0,0x0,0x0,0x7d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x50,0x40,0x10,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[101];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaCCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaCCParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaCCParser(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[125];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 82; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 125; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 101; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
