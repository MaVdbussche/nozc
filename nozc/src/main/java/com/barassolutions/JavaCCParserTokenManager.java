/* Generated By:JavaCC: Do not edit this line. JavaCCParserTokenManager.java */
package com.barassolutions;
import com.barassolutions.ClassDescriptor.SubType;
import com.barassolutions.util.Logger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

/** Token Manager. */
public class JavaCCParserTokenManager implements JavaCCParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000L) != 0L)
            return 67;
         if ((active0 & 0x100L) != 0L || (active1 & 0x80L) != 0L)
            return 0;
         if ((active1 & 0x200000L) != 0L)
            return 44;
         if ((active1 & 0x10000L) != 0L)
            return 33;
         if ((active0 & 0xffffffffff800L) != 0L)
         {
            jjmatchedKind = 100;
            return 20;
         }
         if ((active1 & 0x40000L) != 0L)
            return 22;
         if ((active1 & 0x20000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xfff7d7fbfe000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 100;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0x8280401800L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x2ff3d6f87f000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 100;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active0 & 0xd004010380000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0x56114f37a000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x2a92c20805000L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x44014b360000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x12100401a000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x4a360000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x440101000000L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x4a340000L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 34:
         return jjStartNfaWithStates_0(0, 80, 33);
      case 35:
         return jjStopAtPos(0, 76);
      case 36:
         return jjStopAtPos(0, 78);
      case 37:
         return jjStopAtPos(0, 75);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 39:
         return jjStartNfaWithStates_0(0, 79, 67);
      case 40:
         return jjStopAtPos(0, 90);
      case 41:
         return jjStopAtPos(0, 93);
      case 42:
         return jjStopAtPos(0, 70);
      case 43:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x100L);
      case 44:
         return jjStopAtPos(0, 87);
      case 45:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x200L);
      case 46:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000L);
      case 47:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 58:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x400000L);
      case 59:
         return jjStopAtPos(0, 94);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x9100000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 91:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 92:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 91);
      case 94:
         return jjStopAtPos(0, 83);
      case 95:
         return jjStopAtPos(0, 77);
      case 96:
         return jjStartNfaWithStates_0(0, 81, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1800L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3c000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7c0000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e00000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 89);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 125:
         return jjStopAtPos(0, 92);
      case 176:
         return jjStartNfaWithStates_0(0, 85, 44);
      case 180:
         return jjStartNfaWithStates_0(0, 82, 22);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 38:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 43:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 45:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 46:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 58:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 60:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 93:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xc02140400c000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x420003c0000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 20);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x810020000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x1810020002000L, active1, 0L);
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100040000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L, active1, 0L);
      case 124:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x22a0000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 20);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x48020000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100101000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 20);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x804000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x43002009000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 20);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8202000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040008000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 20);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x500002000000L);
      case 104:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 20);
         break;
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 20);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 20);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000000L);
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 20);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 20);
         break;
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x20004010000L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000040000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 20);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 20);
         break;
      case 104:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 20);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 20);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x40101100000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 20);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8200000L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 20);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 20);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 20);
         break;
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 20);
         break;
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 20);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 20);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x1000000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x10000000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffefffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  else if (curChar == 39)
                     jjAddStates(0, 2);
                  else if (curChar == 34)
                     jjAddStates(3, 4);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(5, 7);
                  }
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 9:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 44:
                  if (kind > 104)
                     kind = 104;
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(8, 10);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 32:
                  if (curChar == 34)
                     jjAddStates(3, 4);
                  break;
               case 34:
                  if (curChar == 34 && kind > 103)
                     kind = 103;
                  break;
               case 36:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 52:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar != 46)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(5, 7);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(63);
                  break;
               case 65:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if (curChar == 39)
                     jjAddStates(0, 2);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 39 && kind > 104)
                     kind = 104;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(34);
                  else if (curChar == 92)
                     jjAddStates(11, 13);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     jjCheckNAdd(70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(68);
                  }
                  break;
               case 5:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAdd(20);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 96)
                     jjAddStates(14, 15);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(23);
                  else if (curChar == 92)
                     jjAddStates(16, 18);
                  break;
               case 9:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAdd(10);
                  else if (curChar == 92)
                     jjAddStates(19, 21);
                  break;
               case 44:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 92)
                     jjAddStates(22, 23);
                  break;
               case 1:
                  jjAddStates(8, 10);
                  break;
               case 6:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 96)
                     jjAddStates(14, 15);
                  break;
               case 10:
                  if (curChar == 96 && kind > 99)
                     kind = 99;
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(19, 21);
                  break;
               case 12:
                  if ((0x14404610000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 19:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(20);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(16, 18);
                  break;
               case 25:
                  if ((0x14404610000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 35:
                  if (curChar == 92)
                     jjAddStates(11, 13);
                  break;
               case 36:
                  if ((0x14404610000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 45:
                  if (curChar == 92)
                     jjAddStates(22, 23);
                  break;
               case 46:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if (curChar == 126)
                     jjCheckNAdd(59);
                  break;
               case 61:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(62);
                  break;
               case 64:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 5:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjAddStates(24, 25);
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 22:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               case 12:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 21:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 23:
                  if ((jjbitVec2[i2] & l2) != 0L && kind > 101)
                     kind = 101;
                  break;
               case 25:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 36:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 43:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(26, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   67, 69, 71, 33, 35, 61, 63, 64, 1, 2, 4, 36, 37, 40, 9, 11, 
   25, 26, 29, 12, 13, 16, 46, 49, 22, 24, 44, 45, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\141\164", 
"\141\164\164\162", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\154\141\163\163", "\143\157\156\164\151\156\165\145", "\144\145\143\154\141\162\145", 
"\144\145\146", "\144\145\146\160\162\157\143", "\144\145\146\141\165\154\164", "\144\157", 
"\145\154\163\145", "\145\170\160\157\162\164", "\145\170\164\145\156\144\163", 
"\146\141\154\163\145", "\146\151\156\141\154\154\171", "\146\157\162", "\146\162\157\155", 
"\146\165\156\143\164\157\162", "\151\146", "\151\155\160\157\162\164", "\151\156", "\154\141\172\171", 
"\154\157\143\153", "\155\141\164\143\150", "\155\145\164\150", "\156\151\154", "\157\162", 
"\160\162\157\160", "\162\141\151\163\145", "\162\145\164\165\162\156", "\163\153\151\160", 
"\163\165\160\145\162", "\164\150\151\163", "\164\150\162\145\141\144", "\164\162\165\145", 
"\164\162\171", "\165\156\151\164", "\166\141\154", "\166\141\162", "\75", "\53\75", "\55\75", 
"\72\75", "\75\75", "\134\75", "\74", "\76", "\75\74", "\76\75", "\74\75", "\75\76", 
"\46\46", "\174\174", "\41", "\41\41", "\55", "\53", "\52", "\57", "\53\53", "\55\55", 
"\134", "\45", "\43", "\137", "\44", "\47", "\42", "\140", "\264", "\136", "\133\135", 
"\260", "\72\72", "\54", "\133", "\173", "\50", "\135", "\175", "\51", "\73", "\72", 
"\56", "\56\56", "\56\56\56", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "MULTI_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0x100007ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7feL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[73];
private final int[] jjstateSet = new int[146];
protected char curChar;
/** Constructor. */
public JavaCCParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaCCParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 73; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003700L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 124)
       {
          jjmatchedKind = 124;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 10)
       {
          jjmatchedKind = 10;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
