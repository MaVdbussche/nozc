/* Generated By:JavaCC: Do not edit this line. JavaCCParserConstants.java */
package com.barassolutions;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int AT = 11;
  /** RegularExpression Id. */
  int ATTR = 12;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int CASE = 14;
  /** RegularExpression Id. */
  int CATCH = 15;
  /** RegularExpression Id. */
  int CLASS = 16;
  /** RegularExpression Id. */
  int CONTINUE = 17;
  /** RegularExpression Id. */
  int DECLARE = 18;
  /** RegularExpression Id. */
  int DEF = 19;
  /** RegularExpression Id. */
  int DEFPROC = 20;
  /** RegularExpression Id. */
  int DEFLT = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int EXPORT = 24;
  /** RegularExpression Id. */
  int EXTENDS = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int FINALLY = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int FROM = 29;
  /** RegularExpression Id. */
  int FUNCTOR = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int IMPORT = 32;
  /** RegularExpression Id. */
  int IN = 33;
  /** RegularExpression Id. */
  int LAZY = 34;
  /** RegularExpression Id. */
  int LOCK = 35;
  /** RegularExpression Id. */
  int MATCH = 36;
  /** RegularExpression Id. */
  int METH = 37;
  /** RegularExpression Id. */
  int NIL = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int PROP = 40;
  /** RegularExpression Id. */
  int RAISE = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int SKP = 43;
  /** RegularExpression Id. */
  int SUPER = 44;
  /** RegularExpression Id. */
  int THIS = 45;
  /** RegularExpression Id. */
  int THREAD = 46;
  /** RegularExpression Id. */
  int TRUE = 47;
  /** RegularExpression Id. */
  int TRY = 48;
  /** RegularExpression Id. */
  int UNIT = 49;
  /** RegularExpression Id. */
  int VAL = 50;
  /** RegularExpression Id. */
  int VAR = 51;
  /** RegularExpression Id. */
  int ASSIGN = 52;
  /** RegularExpression Id. */
  int PLUSASSIGN = 53;
  /** RegularExpression Id. */
  int MINUSASSIGN = 54;
  /** RegularExpression Id. */
  int DEFINE = 55;
  /** RegularExpression Id. */
  int EQUAL = 56;
  /** RegularExpression Id. */
  int NE = 57;
  /** RegularExpression Id. */
  int LT = 58;
  /** RegularExpression Id. */
  int GT = 59;
  /** RegularExpression Id. */
  int LE = 60;
  /** RegularExpression Id. */
  int GE = 61;
  /** RegularExpression Id. */
  int LBARROW = 62;
  /** RegularExpression Id. */
  int IMPL = 63;
  /** RegularExpression Id. */
  int LAND = 64;
  /** RegularExpression Id. */
  int LOR = 65;
  /** RegularExpression Id. */
  int LNOT = 66;
  /** RegularExpression Id. */
  int LNOTNOT = 67;
  /** RegularExpression Id. */
  int MINUS = 68;
  /** RegularExpression Id. */
  int PLUS = 69;
  /** RegularExpression Id. */
  int STAR = 70;
  /** RegularExpression Id. */
  int SLASH = 71;
  /** RegularExpression Id. */
  int INC = 72;
  /** RegularExpression Id. */
  int DEC = 73;
  /** RegularExpression Id. */
  int BACKSLASH = 74;
  /** RegularExpression Id. */
  int MODULO = 75;
  /** RegularExpression Id. */
  int HASHTAG = 76;
  /** RegularExpression Id. */
  int UNDERSCORE = 77;
  /** RegularExpression Id. */
  int DOLLAR = 78;
  /** RegularExpression Id. */
  int APOSTROPHE = 79;
  /** RegularExpression Id. */
  int QUOTE = 80;
  /** RegularExpression Id. */
  int LACCENT = 81;
  /** RegularExpression Id. */
  int RACCENT = 82;
  /** RegularExpression Id. */
  int HAT = 83;
  /** RegularExpression Id. */
  int BOX = 84;
  /** RegularExpression Id. */
  int DEGREE = 85;
  /** RegularExpression Id. */
  int COLCOL = 86;
  /** RegularExpression Id. */
  int COMMA = 87;
  /** RegularExpression Id. */
  int LBRACK = 88;
  /** RegularExpression Id. */
  int LCURLY = 89;
  /** RegularExpression Id. */
  int LPAREN = 90;
  /** RegularExpression Id. */
  int RBRACK = 91;
  /** RegularExpression Id. */
  int RCURLY = 92;
  /** RegularExpression Id. */
  int RPAREN = 93;
  /** RegularExpression Id. */
  int SEMI = 94;
  /** RegularExpression Id. */
  int COLON = 95;
  /** RegularExpression Id. */
  int DOT = 96;
  /** RegularExpression Id. */
  int DOTDOT = 97;
  /** RegularExpression Id. */
  int ELLIPSIS = 98;
  /** RegularExpression Id. */
  int VARIABLESTRICT = 99;
  /** RegularExpression Id. */
  int VARIABLE = 100;
  /** RegularExpression Id. */
  int ATOM = 101;
  /** RegularExpression Id. */
  int ATOMLISP = 102;
  /** RegularExpression Id. */
  int STRING = 103;
  /** RegularExpression Id. */
  int CHARACTER = 104;
  /** RegularExpression Id. */
  int INT = 105;
  /** RegularExpression Id. */
  int FLOAT = 106;
  /** RegularExpression Id. */
  int UPPERCASE = 107;
  /** RegularExpression Id. */
  int LOWERCASE = 108;
  /** RegularExpression Id. */
  int DIGIT = 109;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 110;
  /** RegularExpression Id. */
  int CHARINT = 111;
  /** RegularExpression Id. */
  int ALPHANUM = 112;
  /** RegularExpression Id. */
  int DECINT = 113;
  /** RegularExpression Id. */
  int HEXINT = 114;
  /** RegularExpression Id. */
  int OCTINT = 115;
  /** RegularExpression Id. */
  int BININT = 116;
  /** RegularExpression Id. */
  int OCTDIGIT = 117;
  /** RegularExpression Id. */
  int HEXDIGIT = 118;
  /** RegularExpression Id. */
  int BINDIGIT = 119;
  /** RegularExpression Id. */
  int ESCAPE_CHAR = 120;
  /** RegularExpression Id. */
  int ESC = 121;
  /** RegularExpression Id. */
  int CHARCHAR = 122;
  /** RegularExpression Id. */
  int PSEUDO_CHAR = 123;
  /** RegularExpression Id. */
  int ERROR = 124;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int MULTI_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\b\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "\"at\"",
    "\"attr\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"continue\"",
    "\"declare\"",
    "\"def\"",
    "\"defproc\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"export\"",
    "\"extends\"",
    "\"false\"",
    "\"finally\"",
    "\"for\"",
    "\"from\"",
    "\"functor\"",
    "\"if\"",
    "\"import\"",
    "\"in\"",
    "\"lazy\"",
    "\"lock\"",
    "\"match\"",
    "\"meth\"",
    "\"nil\"",
    "\"or\"",
    "\"prop\"",
    "\"raise\"",
    "\"return\"",
    "\"skip\"",
    "\"super\"",
    "\"this\"",
    "\"thread\"",
    "\"true\"",
    "\"try\"",
    "\"unit\"",
    "\"val\"",
    "\"var\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\":=\"",
    "\"==\"",
    "\"\\\\=\"",
    "\"<\"",
    "\">\"",
    "\"=<\"",
    "\">=\"",
    "\"<=\"",
    "\"=>\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"!!\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"++\"",
    "\"--\"",
    "\"\\\\\"",
    "\"%\"",
    "\"#\"",
    "\"_\"",
    "\"$\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"`\"",
    "\"\\u00b4\"",
    "\"^\"",
    "\"[]\"",
    "\"\\u00b0\"",
    "\"::\"",
    "\",\"",
    "\"[\"",
    "\"{\"",
    "\"(\"",
    "\"]\"",
    "\"}\"",
    "\")\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "<VARIABLESTRICT>",
    "<VARIABLE>",
    "<ATOM>",
    "<ATOMLISP>",
    "<STRING>",
    "<CHARACTER>",
    "<INT>",
    "<FLOAT>",
    "<UPPERCASE>",
    "<LOWERCASE>",
    "<DIGIT>",
    "<NON_ZERO_DIGIT>",
    "<CHARINT>",
    "<ALPHANUM>",
    "<DECINT>",
    "<HEXINT>",
    "<OCTINT>",
    "<BININT>",
    "<OCTDIGIT>",
    "<HEXDIGIT>",
    "<BINDIGIT>",
    "<ESCAPE_CHAR>",
    "<ESC>",
    "<CHARCHAR>",
    "<PSEUDO_CHAR>",
    "<ERROR>",
  };

}
