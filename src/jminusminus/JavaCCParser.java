/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package jminusminus;

import java.util.ArrayList;import java.util.HashMap;

/**
 * Parser generated by JavaCC. It parses a newOz compilation block
 * (program file), taking tokens from the scanner (also generated by
 * JavaCC), and produces an abstract syntax tree (AST) for it.
 */

class JavaCCParser implements JavaCCParserConstants {
    /** Whether a parser error has been found. */
    private boolean errorHasOccurred;

    /** Name of the file that is parsed. */
    private String fileName;

    /**
     * Pull out the ambiguous part of a name and return it.
     *
     * @param name with an ambiguous part (possibly).
     * @return ambiguous part or null.
     */
    private AmbiguousName ambiguousPart(TypeName name) {
        String qualifiedName = name.toString();
        int lastDotIndex = qualifiedName.lastIndexOf('.');
        return lastDotIndex == -1
            ? null // It was a simple name
            : new AmbiguousName(name.line(), qualifiedName.substring( 0, lastDotIndex));
    }

    /**
     * Report a syntax error.
     *
     * @param message message identifying the error.
     * @param args related values.
     */
    private void reportParserError(String message, Object... args) {
        errorHasOccurred = true;
        System.err.printf("%s:%d: ", fileName, token.beginLine);
        System.err.printf(message, args);
        System.err.println();
    }

    /**
     * Recover from the parser error that occurred by skipping to
     * any of the specified tokens.
     *
     * Current error recovery mechanism is rather simple-minded and is
     * based on skipping all the tokens until a SEMI or an EOF is
     * encountered. This scheme can be enhanced by passing in the
     * FOLLOW-SET of the non-terminal at hand.
     *
     * @param skipTo array of tokens that we could skip to.
     * @param e exception that is raised by JavaCC in the event
     * of a parser error.
     */
    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[ i ].length; j++) {
                expected.append("\u005cn");
                expected.append("\u005ct");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\u005c"%s\u005c" found where %s sought", getToken( 1 ), expected);
        } else {
            reportParserError("\u005c"%s\u005c" found where one of %s sought", getToken(1), expected);
        }

        // Recover
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i : skipTo) {
                if (token.kind == i) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

    /**
     * Set the name of the file that is being parsed.
     *
     * @param fileName name of the file.
     */
    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Has a parser error occurred up to now?
     *
     * @return true or false.
     */
    public boolean errorHasOccurred() {
        return errorHasOccurred;
    }

  static final private Block block() throws ParseException {
    int line = 0;
    Statement aStatement = null;
    ArrayList<Statement> statements = new ArrayList<Statement>();
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case FOR:
        case IF:
        case LOCK:
        case MATCH:
        case RAISE:
        case RETURN:
        case SKP:
        case THIS:
        case THREAD:
        case TRUE:
        case TRY:
        case UNIT:
        case VAL:
        case VAR:
        case LNOT:
        case TILDE:
        case LCURLY:
        case LPAREN:
        case ATOM:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING:
        case CHAR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        aStatement = blockStatement();
              statements.add( aStatement );
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new Block( line, statements );}
    throw new Error("Missing return statement in function");
  }

  static final private Statement blockStatement() throws ParseException {
    Statement statement = null;
    try {
      if (jj_2_1(2147483647)) {
        //TODO type in newOz = var or val (to discuss)
                statement = localVariableDeclarationStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case FOR:
        case IF:
        case LOCK:
        case MATCH:
        case RAISE:
        case RETURN:
        case SKP:
        case THIS:
        case THREAD:
        case TRUE:
        case TRY:
        case UNIT:
        case LNOT:
        case TILDE:
        case LCURLY:
        case LPAREN:
        case ATOM:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING:
        case CHAR:
          statement = statement();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final private VariableDeclaration localVariableDeclarationStatement() throws ParseException {
    int line = 0;
    Type type = null;
    ArrayList<VariableDeclarator> vdecls = null;
    ArrayList<String> mods = new ArrayList<String>();
    try {
      type = type();
                        line = token.beginLine;
      vdecls = variableDeclarators(type);
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new VariableDeclaration( line, mods, vdecls );}
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<VariableDeclarator> variableDeclarators(Type type) throws ParseException {
    VariableDeclarator aVariableDeclarator = null;
    ArrayList<VariableDeclarator> variableDeclarators = new ArrayList<VariableDeclarator>();
    try {
      aVariableDeclarator = variableDeclarator(type);
          variableDeclarators.add( aVariableDeclarator );
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        aVariableDeclarator = variableDeclarator(type);
              variableDeclarators.add( aVariableDeclarator );
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return variableDeclarators;}
    throw new Error("Missing return statement in function");
  }

  static final private VariableDeclarator variableDeclarator(Type type) throws ParseException {
    int line = 0;
    Expression initial = null;
    String name = "";
    try {
      jj_consume_token(IDENTIFIER);
                       line = token.beginLine; name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        initial = variableInitializer(type);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new VariableDeclarator( line, name, type, initial );}
    throw new Error("Missing return statement in function");
  }

  static final private Expression variableInitializer(Type expected) throws ParseException {
    Expression initializer = null;
    try {
      initializer = expression();
    } catch (ParseException e) {
        recoverFromError( new int[] { SEMI, EOF }, e );
    }
      {if (true) return initializer;}
    throw new Error("Missing return statement in function");
  }

  static final private Type type() throws ParseException {
    Type type = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAL:
        jj_consume_token(VAL);
                type = Type.VAL;
        break;
      case VAR:
        jj_consume_token(VAR);
                type = Type.VAR;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
       recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  static final private Statement statement() throws ParseException {
    int line = 0;
    Statement statement = null;
    Object loopDec = null; //TODO object type ?
    Expression test = null;
    Statement consequent = null;
    Statement alternate = null;
    Statement body = null;
    Expression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        statement = block();
        break;
      case SKP:
        jj_consume_token(SKP);
          statement = new EmptyStatement( line );
        break;
      case IF:
        jj_consume_token(IF);
               line = token.beginLine;
        test = parExpression();
        consequent = statement();
        if (jj_2_2(2147483647)) {
          jj_consume_token(ELSE);
          alternate = statement();
        } else {
          ;
        }
          statement = new IfStatement(line, test, consequent, alternate);
        break;
      case FOR:
        jj_consume_token(FOR);
                line = token.beginLine;
        jj_consume_token(LPAREN);
        loopDec = loopDeclaration();
        jj_consume_token(RPAREN);
        body = block();
          statement = new ForStatement(line, loopDec, body);
        break;
      case TRY:
        jj_consume_token(TRY);
                line = token.beginLine;
        body = block();
        if (jj_2_3(2147483647)) {
          jj_consume_token(CATCH);
          consequent = patternMatchBlock();
        } else {
          ;
        }
        if (jj_2_4(2147483647)) {
          jj_consume_token(FINALLY);
          alternate = block();
        } else {
          ;
        }
          statement = new TryStatement(line, body, consequent, alternate);
        break;
      case MATCH:
        jj_consume_token(MATCH);
                  line = token.beginLine;
        expr = expression();
        body = patternMatchBlock();
          statement = new MatchStatement(line, expression, body);
        break;
      case THREAD:
        jj_consume_token(THREAD);
                   line = token.beginLine;
        body = block();
          statement = new ThreadStatement(line, body);
        break;
      case LOCK:
        jj_consume_token(LOCK);
                 line = token.beginLine;
        jj_consume_token(LPAREN);
        expr = expression();
        jj_consume_token(RPAREN);
        body = block();
          statement = new LockStatement(line, expr, body);
        break;
      case RAISE:
        jj_consume_token(RAISE);
                  line = token.beginLine;
        expr = blockExpression();
          statement = new RaiseStatement( line, expr );
        break;
      case RETURN:
        jj_consume_token(RETURN);
                   line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case THIS:
        case TRUE:
        case UNIT:
        case LNOT:
        case TILDE:
        case LPAREN:
        case ATOM:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING:
        case CHAR:
          expr = expression();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
          statement = new ReturnStatement(line, expr);
        break;
      case FALSE:
      case THIS:
      case TRUE:
      case UNIT:
      case LNOT:
      case TILDE:
      case LPAREN:
      case ATOM:
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING:
      case CHAR:
        // Must be a statementExpression
                statement = statementExpression();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression parExpression() throws ParseException {
    Expression expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression blockExpression() throws ParseException {
    Expression expr = null;
    try {
      jj_consume_token(LCURLY);
      expr = expression();
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private LoopDeclaration loopDeclaration() throws ParseException {
    int line = 0;
    LoopDecPart part = null;
    ArrayList<LoopDecPart> list = new ArrayList<LoopDecPart>();
    try {
      part = loopDecPart();
          line = token.beginLine;
          list.add(part);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        part = loopDecPart();
            list.add(part);
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new LoopDeclaration(line, list);}
    throw new Error("Missing return statement in function");
  }

  static final private LoopDecPart loopDecPart() throws ParseException {
    int line = 0;
    LoopDecPart part = null;
    Identifier var = null;
    Expression range1 = null;
    Expression range2 = null;
    BoolExpression condition = null;
    Expression step = null;
    try {
      var = identifier();
                             line = token.beginLine;
      jj_consume_token(IN);
      if (jj_2_5(2147483647)) {
        range1 = expression();
        jj_consume_token(DOTDOT);
        range2 = expression();
            part = new LoopDecPart(line, var, range1, range2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          jj_consume_token(SEMI);
          step = expression();
              part.setStep(step);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } else if (jj_2_6(2147483647)) {
        range1 = expression();
        jj_consume_token(SEMI);
        range2 = expression();
            part = new LoopDecPart(line, var, range1, true, range2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          jj_consume_token(SEMI);
          step = expression();
              condition = range2;
              part = new LoopDecPart(line, var, range1, condition, step);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          range1 = expression();
          jj_consume_token(SEMI);
          condition = expression();
          jj_consume_token(SEMI);
          step = expression();
          jj_consume_token(RPAREN);
            part = new LoopDecPart(line, var, range1, condition, step);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return part;}
    throw new Error("Missing return statement in function");
  }

  static final private Statement statementExpression() throws ParseException {
    int line = 0;
    Expression expr = null;
    try {
      expr = expression();
            line = expr.line();
            if ( expr instanceof Assignment
              || expr instanceof PreIncrementOp
              || expr instanceof PostDecrementOp
              || expr instanceof MessageExpression
              || expr instanceof SuperConstruction
              || expr instanceof ThisConstruction
              || expr instanceof NewArrayOp ) { //TODO others. This might be the fix for the last 2 warning in javacc
                // So as not to save on stack
                expr.isStatementExpression = true;
            }
            else {
                reportParserError( "Invalid statement expression; " +
                    "it does not have a side-effect" );
            }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new StatementExpression( line, expr );}
    throw new Error("Missing return statement in function");
  }

  static final private TypeName identifier() throws ParseException {
    int line = 0;
    String identifier = null;
    try {
      jj_consume_token(IDENTIFIER);
            line = token.beginLine;
            identifier = token.image;
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return
         new TypeName( line, identifier );}
    throw new Error("Missing return statement in function");
  }

  static final private PatternMatchBlock patternMatchBlock() throws ParseException {
    int line = 0;
    Expression cond = null;
    Statement conseq = null;
    Map<Expression, Statement> cases = new HashMap<Expression, Statement>();
    Statement elseCase = null;
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_4:
      while (true) {
        cond = expression();
        jj_consume_token(IMPL);
            cases.put(cond, null);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          conseq = block();
              consequences.put(cond, conseq);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case THIS:
        case TRUE:
        case UNIT:
        case LNOT:
        case TILDE:
        case LPAREN:
        case ATOM:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING:
        case CHAR:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseCase = block();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new PatternMatchBlock(line, cases, elseCase);}
    throw new Error("Missing return statement in function");
  }

  static final private Expression expression() throws ParseException {
    Expression expr = null;
    try {
      expr = assignmentExpression();
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression assignmentExpression() throws ParseException {
    int line = 0;
    Expression lhs = null, rhs = null;
    try {
      lhs = conditionalExpression();
                                        line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        rhs = assignmentExpression();
              lhs = new AssignOp( line, lhs, rhs );
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression conditionalExpression() throws ParseException {
    Expression expr = null;
    try {
      expr = conditionalOrExpression();
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression conditionalOrExpression() throws ParseException {
    int line = 0;
    Expression lhs = null, rhs = null;
    try {
      lhs = conditionalAndExpression();
                                           line = token.beginLine;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        jj_consume_token(LOR);
        rhs = conditionalAndExpression();
              lhs = new LogicalOrOp( line, lhs, rhs );
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression conditionalAndExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = equalityExpression();
                                     line = token.beginLine;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        jj_consume_token(LAND);
        rhs = equalityExpression();
              lhs = new LogicalAndOp( line, lhs, rhs );
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression equalityExpression() throws ParseException {
    int line = 0;
    Expression lhs = null, rhs = null;
    try {
      lhs = relationalExpression();
                                       line = token.beginLine;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(EQUAL);
        rhs = relationalExpression();
              lhs = new EqualOp( line, lhs, rhs );
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression relationalExpression() throws ParseException {
    int line = 0;
    Expression lhs = null, rhs = null;
    try {
      lhs = additiveExpression();
                                     line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          rhs = additiveExpression();
              lhs = new GreaterThanOp( line, lhs, rhs );
          break;
        case LE:
          jj_consume_token(LE);
          rhs = additiveExpression();
              lhs = new LessEqualOp( line, lhs, rhs );
          break;
        case LT:
          jj_consume_token(LT);
          rhs = additiveExpression();
              lhs = new LessThanOp( line, lhs, rhs );
          break;
        case GE:
          jj_consume_token(GE);
          rhs = additiveExpression();
              lhs = new GreaterEqualOp( line, lhs, rhs );
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression additiveExpression() throws ParseException {
    int line = 0;
    Expression lhs = null, rhs = null;
    try {
      lhs = multiplicativeExpression();
                                           line = token.beginLine;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
              lhs = new PlusOp( line, lhs, rhs );
          break;
        case MINUS:
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
              lhs = new SubtractOp( line, lhs, rhs );
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression multiplicativeExpression() throws ParseException {
    int line = 0;
    Expression lhs = null, rhs = null;
    try {
      lhs = unaryExpression();
                                  line = token.beginLine;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          rhs = unaryExpression();
              lhs = new MultiplyOp( line, lhs, rhs );
          break;
        case SLASH:
          jj_consume_token(SLASH);
          rhs = unaryExpression();
              lhs = new DivisionOp( line, lhs, rhs );
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression unaryExpression() throws ParseException {
    int line = 0;
    Expression expr = null, unaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
                  line = token.beginLine;
        unaryExpr = unaryExpression();
          expr = new NegateOp( line, unaryExpr );
        break;
      case FALSE:
      case THIS:
      case TRUE:
      case UNIT:
      case LNOT:
      case LPAREN:
      case ATOM:
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING:
      case CHAR:
        expr = simpleUnaryExpression();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression simpleUnaryExpression() throws ParseException {
    int line = 0;
    Type type = null;
    Expression expr = null, unaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LNOT:
        jj_consume_token(LNOT);
                 line = token.beginLine;
        unaryExpr = unaryExpression();
          expr = new LogicalNotOp( line, unaryExpr );
        break;
      case FALSE:
      case THIS:
      case TRUE:
      case UNIT:
      case LPAREN:
      case ATOM:
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING:
      case CHAR:
        expr = primary();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr ;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression primary() throws ParseException {
    int line = 0;
    Expression expr = null;
    Expression newTarget = null;
    ArrayList<Expression> args = null;
    TypeName id = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = parExpression();
        break;
      case THIS:
        jj_consume_token(THIS);
                 line = token.beginLine; expr = new This( line );
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
                newTarget = new This( line );
                expr = new FieldSelection( line, newTarget, token.image );
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            args = arguments();
                  expr = new MessageExpression( line, newTarget, null, token.image, args );
            break;
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
      case FALSE:
      case TRUE:
      case UNIT:
      case ATOM:
      case INT_LITERAL:
      case STRING:
      case CHAR:
        expr = literal();
        break;
      case IDENTIFIER:
        // Language is ambiguous here. JavaCC warns about not being
                // able to choose between qualifiedIdentifier and selector.
                // Semantic analysis will sort it out.
                id = qualifiedIdentifier();
            line = id.line();
            if ( ambiguousPart( id ) == null ) {
                expr = new Variable( line, id.simpleName() );
            }
            else {
                expr = new FieldSelection( line, ambiguousPart( id ),
                                            null, id.simpleName() );
            }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = arguments();
              expr = new MessageExpression( line, null,
                  ambiguousPart( id ), id.simpleName(), args );
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final private TypeName qualifiedIdentifier() throws ParseException {
    int line = 0;
    String qualifiedIdentifier = "";
    try {
      jj_consume_token(IDENTIFIER);
            line = token.beginLine;
            qualifiedIdentifier = token.image;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_10;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
              qualifiedIdentifier += "." + token.image;
      }
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return new TypeName( line, qualifiedIdentifier );}
    throw new Error("Missing return statement in function");
  }

  static final private ArrayList<Expression> arguments() throws ParseException {
    ArrayList<Expression> args = new ArrayList<Expression>();
    Expression anExpression = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case THIS:
      case TRUE:
      case UNIT:
      case LNOT:
      case TILDE:
      case LPAREN:
      case ATOM:
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING:
      case CHAR:
        anExpression = expression();
                                          args.add( anExpression );
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          anExpression = expression();
                  args.add( anExpression );
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final private Expression literal() throws ParseException {
    Expression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
        jj_consume_token(INT_LITERAL);
          expr = new LiteralInt( token.beginLine, token.image );
        break;
      case CHAR:
        jj_consume_token(CHAR);
          expr = new LiteralChar( token.beginLine, token.image );
        break;
      case STRING:
        jj_consume_token(STRING);
          expr = new LiteralString( token.beginLine, token.image );
        break;
      case TRUE:
        jj_consume_token(TRUE);
          expr = new LiteralTrue( token.beginLine );
        break;
      case FALSE:
        jj_consume_token(FALSE);
          expr = new LiteralFalse( token.beginLine );
        break;
      case UNIT:
        jj_consume_token(UNIT);
          expr = new LiteralUnit( token.beginLine );
        break;
      case ATOM:
        jj_consume_token(ATOM);
          expr = new LiteralAtom( token.beginLine );
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        expr = new WildExpression( token.beginLine );
        recoverFromError( new int[] { RCURLY, EOF }, e );
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(UNIT)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(DOTDOT)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(FINALLY)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(CATCH)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaCCParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffa0624,0x3fa0624,0x0,0x10000000,0xc000000,0x2a00000,0x3fa0624,0x0,0x0,0x0,0x0,0x0,0x2a00000,0x0,0x10000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2a00000,0x2a00000,0x0,0x0,0x0,0x2a00000,0x0,0x0,0x2a00000,0x2800000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x8000400,0x8000400,0x0,0x0,0x0,0x8000400,0x8000400,0x0,0x0,0x0,0x0,0x0,0x8000400,0x0,0x0,0x200,0x80,0x0,0xf,0xf,0x3000,0x3000,0xc000,0xc000,0x8000400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x8000400,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xda00c00,0xda00c00,0x100,0x0,0x0,0xda00800,0xda00c00,0x100,0x8000,0x8000,0x800,0x400,0xda00800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xda00800,0xda00800,0x800,0x20000,0x800,0xda00800,0x20000,0x100,0xda00800,0xd200000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaCCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaCCParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaCCParser(JavaCCParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[145];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 145; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
