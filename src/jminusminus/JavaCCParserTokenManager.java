/* Generated By:JavaCC: Do not edit this line. JavaCCParserTokenManager.java */
package jminusminus;
import java.util.ArrayList;
import java.util.HashMap;

/** Token Manager. */
public class JavaCCParserTokenManager implements JavaCCParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800000L) != 0L)
            return 52;
         if ((active1 & 0x200000L) != 0L)
            return 76;
         if ((active1 & 0x80000L) != 0L)
            return 20;
         if ((active0 & 0xc1fffe03ffffc00L) != 0L)
         {
            jjmatchedKind = 117;
            return 121;
         }
         if ((active0 & 0x80L) != 0L || (active1 & 0x8000L) != 0L)
            return 0;
         if ((active0 & 0x1e0000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 17;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 9;
         }
         if ((active1 & 0x400000L) != 0L)
            return 28;
         if ((active1 & 0x10000000L) != 0L)
            return 39;
         if ((active0 & 0x1fc0000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 14;
         }
         if ((active1 & 0x8000000L) != 0L)
            return 100;
         return -1;
      case 1:
         if ((active0 & 0xc0000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x180000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 16;
         }
         if ((active0 & 0x60a004000c00L) != 0L)
            return 121;
         if ((active0 & 0xc7f9f5f3bfff000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 121;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 8;
         }
         return -1;
      case 2:
         if ((active0 & 0x7f8f5b781ff800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 121;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 122;
         }
         if ((active0 & 0xd00100403e00000L) != 0L)
            return 121;
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 12;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0x4e845231bbd000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
            return 121;
         }
         if ((active0 & 0x2b10b0948042800L) != 0L)
            return 121;
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
            return 122;
         }
         return -1;
      case 4:
         if ((active0 & 0x2040080015000L) != 0L)
            return 121;
         if ((active0 & 0x4c805231ba8000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 4;
            return 121;
         }
         return -1;
      case 5:
         if ((active0 & 0x48004010208000L) != 0L)
            return 121;
         if ((active0 & 0x48012219a0000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
            return 121;
         }
         return -1;
      case 6:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
            return 121;
         }
         if ((active0 & 0x4801221920000L) != 0L)
            return 121;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 34:
         return jjStartNfaWithStates_0(0, 86, 28);
      case 35:
         return jjStopAtPos(0, 82);
      case 36:
         return jjStopAtPos(0, 84);
      case 37:
         return jjStopAtPos(0, 81);
      case 38:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 39:
         return jjStartNfaWithStates_0(0, 85, 76);
      case 40:
         return jjStopAtPos(0, 107);
      case 41:
         return jjStopAtPos(0, 110);
      case 42:
         return jjStopAtPos(0, 78);
      case 43:
         return jjStopAtPos(0, 77);
      case 44:
         return jjStopAtPos(0, 104);
      case 45:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 46:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000L);
      case 47:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 58:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0xc000000000L);
      case 59:
         return jjStopAtPos(0, 111);
      case 60:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x440000010L);
      case 61:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x900000024L);
      case 62:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000008L);
      case 64:
         return jjStopAtPos(0, 93);
      case 91:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 92:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x200000000L);
      case 93:
         return jjStopAtPos(0, 108);
      case 94:
         return jjStopAtPos(0, 89);
      case 95:
         return jjStartNfaWithStates_0(0, 83, 20);
      case 96:
         return jjStartNfaWithStates_0(0, 87, 52);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfe000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7f00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x38000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1fc0000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xe000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 106);
      case 124:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 125:
         return jjStopAtPos(0, 109);
      case 126:
         return jjStartNfaWithStates_0(0, 91, 100);
      case 176:
         return jjStartNfaWithStates_0(0, 92, 39);
      case 180:
         return jjStopAtPos(0, 88);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 38:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 45:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 46:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L);
      case 58:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L);
      case 60:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L);
      case 61:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2200000000L);
      case 62:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 93:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xc020500c0006000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc080101f00000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 121);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 121);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000008000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x202000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8010000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 121);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 121);
         return jjMoveStringLiteralDfa2_0(active0, 0x1204000e0000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 121);
         return jjMoveStringLiteralDfa2_0(active0, 0x181800800001000L, active1, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         break;
      case 58:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 97);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 103);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000100000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000001000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1a00000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x232000040000000L, active1, 0L);
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 121);
         return jjMoveStringLiteralDfa3_0(active0, 0x80020000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000c0000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800008000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4010000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 121);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 121);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 121);
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 121);
         return jjMoveStringLiteralDfa3_0(active0, 0x80c0020004800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 121);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x201001000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x41000004000L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 121);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 121);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 121);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000020000000L);
      case 104:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 121);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000L);
      case 107:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 121);
         break;
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x120000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 121);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4010000000L);
      case 112:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 121);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 121);
         break;
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000080010000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 121);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 121);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000L);
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40800000100000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 121);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 121);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 121);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 121);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000080000L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 121);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20200000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8004010800000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 121);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 121);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 121);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 121);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x201000000L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 121);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800000100000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 121);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 121);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 121);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 121);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 121);
         break;
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 121);
         break;
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 121);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 121);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 121);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 121);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x1000000000000L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 121;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                     jjCheckNAdd(98);
                  }
                  else if (curChar == 48)
                     jjCheckNAdd(118);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(97);
                  }
                  else if (curChar == 48)
                     jjCheckNAdd(116);
                  if (curChar == 48)
                     jjCheckNAdd(113);
                  if (curChar == 48)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  if (curChar == 48)
                     jjCheckNAdd(108);
                  if (curChar == 48)
                     jjCheckNAdd(106);
                  if (curChar == 48)
                     jjCheckNAdd(103);
                  if (curChar == 48)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  break;
               case 28:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 39:
                  if (kind > 123)
                     kind = 123;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 52:
                  jjCheckNAdd(55);
                  jjCheckNAdd(53);
                  break;
               case 76:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(79);
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  else if (curChar == 39)
                     jjAddStates(0, 3);
                  else if (curChar == 34)
                     jjAddStates(4, 5);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(97, 98);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(6, 11);
                  }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(12, 14);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 40 && kind > 118)
                     kind = 118;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar != 46)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if (curChar == 34)
                     jjAddStates(4, 5);
                  break;
               case 29:
                  if (curChar == 34 && kind > 122)
                     kind = 122;
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 41:
                  if ((0x8400000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 7);
                  break;
               case 54:
                  jjCheckNAdd(55);
                  break;
               case 57:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 61:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 65:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  break;
               case 75:
                  if (curChar == 39)
                     jjAddStates(0, 3);
                  break;
               case 77:
                  if (curChar == 39 && kind > 117)
                     kind = 117;
                  break;
               case 78:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if (curChar == 39)
                     jjCheckNAdd(7);
                  break;
               case 81:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 85:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 89:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 93:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 96:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(97, 98);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(97);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(98);
                  break;
               case 101:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(97);
                  break;
               case 102:
                  if (curChar == 48)
                     jjCheckNAdd(103);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 105:
                  if (curChar == 48)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(106);
                  break;
               case 107:
                  if (curChar == 48)
                     jjCheckNAdd(108);
                  break;
               case 109:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 110:
                  if (curChar == 48 && kind > 125)
                     kind = 125;
                  break;
               case 111:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(98);
                  break;
               case 112:
                  if (curChar == 48)
                     jjCheckNAdd(113);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 115:
                  if (curChar == 48)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(116);
                  break;
               case 117:
                  if (curChar == 48)
                     jjCheckNAdd(118);
                  break;
               case 119:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 120:
                  if (curChar != 48)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(6, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 121:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  break;
               case 122:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 101)
                     jjCheckNAdd(7);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(29);
                  else if (curChar == 92)
                     jjAddStates(15, 17);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 116)
                     jjCheckNAdd(7);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(11);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if (curChar == 92)
                     jjAddStates(18, 20);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 52:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAdd(55);
                  else if (curChar == 92)
                     jjAddStates(21, 23);
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAdd(53);
                  else if (curChar == 92)
                     jjAddStates(24, 26);
                  break;
               case 76:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(79);
                  else if (curChar == 92)
                     jjAddStates(27, 29);
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(77);
                  else if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 126)
                     jjAddStates(33, 43);
                  else if (curChar == 96)
                     jjAddStates(44, 47);
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddStates(48, 50);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(51, 53);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(73);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 1:
                  jjAddStates(12, 14);
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 101)
                     jjCheckNAdd(7);
                  break;
               case 15:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(20);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if (curChar == 126)
                     jjCheckNAdd(26);
                  break;
               case 30:
                  if (curChar == 92)
                     jjAddStates(15, 17);
                  break;
               case 31:
                  if ((0x54404710000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 40:
                  if (curChar == 92)
                     jjAddStates(18, 20);
                  break;
               case 41:
                  if ((0x54404710000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 42:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 48:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(51, 53);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 7);
                  break;
               case 51:
                  if (curChar == 96)
                     jjAddStates(44, 47);
                  break;
               case 53:
                  if (curChar == 96 && kind > 116)
                     kind = 116;
                  break;
               case 54:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if (curChar == 96)
                     jjCheckNAdd(7);
                  break;
               case 56:
                  if (curChar == 92)
                     jjAddStates(24, 26);
                  break;
               case 57:
                  if ((0x54404710000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 58:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 64:
                  if (curChar == 92)
                     jjAddStates(21, 23);
                  break;
               case 65:
                  if ((0x54404710000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 66:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 72:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(48, 50);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 7);
                  break;
               case 78:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 81:
                  if ((0x54404710000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 82:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 88:
                  if (curChar == 92)
                     jjAddStates(27, 29);
                  break;
               case 89:
                  if ((0x54404710000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 99:
                  if (curChar == 126)
                     jjAddStates(33, 43);
                  break;
               case 103:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(104);
                  break;
               case 104:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(104);
                  break;
               case 108:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 113:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(114);
                  break;
               case 118:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(53);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 76:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(77);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 31:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 41:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 65:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 81:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 89:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAdd(77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 121 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   76, 78, 80, 88, 28, 30, 103, 106, 108, 113, 116, 118, 1, 2, 4, 31, 
   32, 35, 41, 42, 45, 65, 66, 69, 57, 58, 61, 89, 90, 93, 81, 82, 
   85, 100, 101, 102, 105, 107, 21, 110, 111, 112, 115, 117, 52, 54, 56, 64, 
   73, 74, 7, 49, 50, 7, 39, 40, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\141\164", 
"\141\164\164\162", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\157\151\143\145", "\143\154\141\163\163", "\143\157\154\154\145\143\164", "\143\157\156\144", 
"\143\157\156\164\151\156\165\145", "\144\145\143\154\141\162\145", "\144\145\146\151\156\145", "\144\145\146", 
"\144\145\146\160\162\157\143", "\144\145\146\141\165\154\164", "\144\151\163", "\144\157", 
"\145\154\163\145", "\145\170\160\157\162\164", "\145\170\164\145\156\144\163", 
"\146\141\151\154", "\146\141\154\163\145", "\146\145\141\164", "\146\151\156\141\154\154\171", 
"\146\157\162", "\146\162\157\155", "\146\165\156\143\164\157\162", "\151\146", 
"\151\155\160\157\162\164", "\151\156", "\154\141\172\171", "\154\157\143\153", "\155\141\164\143\150", 
"\155\145\164\150", "\156\157\164", "\157\146", "\157\162", "\160\162\145\160\141\162\145", 
"\160\162\157\160", "\162\141\151\163\145", "\162\145\161\165\151\162\145", 
"\162\145\164\165\162\156", "\163\153\151\160", "\164\150\151\163", "\164\150\162\145\141\144", 
"\164\162\165\145", "\164\162\171", "\165\156\151\164", "\166\141\154", "\166\141\162", "\75", 
"\72\75", "\75\75", "\134\75", "\74", "\76", "\75\74", "\76\75", "\74\75", "\75\76", 
"\46", "\46\46", "\174", "\174\174", "\41", "\41\41", "\55", "\53", "\52", "\57", 
"\134", "\45", "\43", "\137", "\44", "\47", "\42", "\140", "\264", "\136", "\133\135", 
"\176", "\260", "\100", "\74\55", "\55\76", "\75\72", "\134\75\72", "\74\72", 
"\75\74\72", "\76\72", "\76\75\72", "\72\72", "\72\72\72", "\54", "\133", "\173", "\50", 
"\135", "\175", "\51", "\73", "\72", "\56", "\56\56", "\56\56\56", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "MULTI_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0xefffffffffffffffL, 0x10001L, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[121];
static private final int[] jjstateSet = new int[242];
static protected char curChar;
/** Constructor. */
public JavaCCParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public JavaCCParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 121; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 144)
       {
          jjmatchedKind = 144;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
