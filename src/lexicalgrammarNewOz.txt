// Lexical grammar for newOz
// This is translated directly from M. Mbonyincungu's thesis
// Notations :
//Notation      Meaning
//========================================================================
//\epsilon      singleton containing the empty word
//(w)           grouping of regular expressions
//[ w ]         union of \epsilon with the set of words w (optionnal group)
//{ w }         zero or more times w
//{ w }+        one or more times w
//w_1 w_2       concatenation of w_1 with w_2
//w_1 | w_2     logical union of w_1 and w_2 (OR)
//w_1 - w_2     difference of w_1 and w_2

// White spaces - ignored
WHITESPACE ::= (" "|"\t"|"\n"|"\r"|"\f")

// Comments - ignored
("//" {~("\n"|"\r")} ("\n"|"\r"["\n"])) | "?"

// Multi-line comments - ignored
"/*" {CHAR - "*/"} "*/"

// Reserved keywords
//ANDTHEN ::= "andthen"
AT      ::= "at"
ATTR    ::= "attr"
BREAK   ::= "break"
//CASE    ::= "case"
CATCH   ::= "catch"
CHOICE  ::= "choice"
CLASS   ::= "class"
COLLECT ::= "collect"
COND    ::= "cond"
CONTINUE  ::= "continue"
DECLARE ::= "declare"
DEF     ::= "def"
DEFPROC ::= "defproc"
DEFAULT ::= "default"
//DEFINE  ::= "define"
DIS     ::= "dis"
//DIV     ::= "div"
DO      ::= "do"
ELSE    ::= "else"
ELSECASE  ::= "elsecase"
//ELSEIF  ::= "elseif"
//ELSEOF  ::= "elseof"
//END     ::= "end"
EXPORT  ::= "export"
FAIL    ::= "fail"
FALSE   ::= "false"
FEAT    ::= "feat"
FINALLY ::= "finally"
FOR     ::= "for"
FROM    ::= "from"
//FUN     ::= "fun"
FUNCTOR ::= "functor"
IF      ::= "if"
IMPORT  ::= "import"
IN      ::= "in"
//LAZY    ::= "lazy" //TODO quid ?
//LOCAL   ::= "local"
LOCK    ::= "lock"
MATCH   ::= "match"
METH    ::= "meth"
MOD     ::= "mod"
NOT     ::= "not"
OF      ::= "of"
OR      ::= "or"
//ORELSE  ::= "orelse"
PREPARE ::= "prepare"
//PROC    ::= "proc"
PROP    ::= "prop"
RAISE   ::= "raise"
REQUIRE ::= "require"
RETURN  ::= "return"
//SELF    ::= "self"
SKIP    ::= "skip"
//THEN    ::= "then"
THIS    ::= "this"
THREAD  ::= "thread"
TRUE    ::= "true"
TRY     ::= "try"
UNIT    ::= "unit"
VAL     ::= "val"
VAR     ::= "var"

ASSIGN      ::= "=" ok
DEFINE      ::= ":=" ok
EQUAL       ::= "==" ok
NE          ::= "\=" ok
LT          ::= "<" ok
GT          ::= ">" ok
LE          ::= "=<" ok
GE          ::= ">=" ok
LBARROW     ::= "<=" ok
IMPL        ::= "=>" ok
AND         ::= "&" ok
LAND        ::= "&&" ok
PIPE        ::= "|" ok
LOR         ::= "||" ok
LNOT        ::= "!" ok
//LNOTNOT     ::= "!!" skipped
MINUS       ::= "-" ok
PLUS        ::= "+" ok
STAR        ::= "*" ok
SLASH       ::= "/" ok
BACKSLASH   ::= "\" ok
MODULO      ::= "%" ok
HASHTAG     ::= "#" ok
UNDERSCORE  ::= "_" ok
DOLLAR      ::= "$" ok
APOSTROPHE  ::= "'" ok
QUOTE       ::= """ ok
LACCENT     ::= "`" ok
RACCENT     ::= "´" ok
HAT         ::= "^" ok
BOX         ::= "[]" ok
TILDE       ::= "~" ok
DEGREE      ::= "°"
COMMERCAT   ::= "@" ok
LARROW      ::= "<-" ok
RARROW      ::= "->" ok
FDASSIGN    ::= "=:" //skipped
FDNE        ::= "\=:" //skipped
FDLT        ::= "<:" //skipped
FDLE        ::= "=<:" //skipped
FDGT        ::= ">:" //skipped
FDGE        ::= ">=:" //skipped
COLCOL      ::= "::" ok
COLCOLCOL   ::= ":::" ok

COMMENTCHAR ::= "/" ok
COMMA       ::= "," ok
DOT         ::= "." ok
LBRACK      ::= "[" ok
LCURLY      ::= "{" ok
LPAREN      ::= "(" ok
RBRACK      ::= "]" ok
RCURLY      ::= "}" ok
RPAREN      ::= ")" ok
SEMI        ::= ";" ok
COLON       ::= ":" ok
DOTDOT      ::= ".." ok
ELLIPSIS    ::= "..." ok

// Literals
UPPERCASE      ::= "A"|...|"Z"
LOWERCASE      ::= "a"|...|"z"
DIGIT          ::= "0"|...|"9"
NONZERODIGIT   ::= "1"|...|"9"
CHARINT        ::= "0"|...|"255"
ALPHANUM       ::= UPPERCASE | LOWERCASE | DIGIT | "_"
ATOMCHAR       ::= CHAR - ("'"|"\"|NUL)
STRINGCHAR     ::= CHAR - ("""|"\"|NUL)
VARIABLECHAR   ::= CHAR - ("`"|"\"|NUL)
CHARCHAR       ::= CHAR - ("\"|NUL)
ESCCHAR        ::= "a"|"b"|"f"|"n"|"r"|"t"|"v"|"\"|"'"|"""|"`"|"&"
OCTDIGIT       ::= "0"|...|"7"
HEXDIGIT       ::= "0"|...|"9"|"A"|...|"F"|"a"|...|"f"
BINDIGIT       ::= "0"|"1"
NONZERODIGIT   ::= "1"|...|"9"
PSEUDOCHAR     ::= "\" OCTDIGIT OCTDIGIT OCTDIGIT
                | "\" ("x" | "X") HEXDIGIT HEXDIGIT
                | "\" ESCCHAR

// End of file
EOF            ::= "<end of file>"